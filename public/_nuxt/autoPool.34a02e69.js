import{a8 as wo,C as So,V as bo,a9 as fo}from"./entry.af8219de.js";import{c as g,a as qo}from"./sha256.ec2a7361.js";import{J as ko,b as N,K as z,T as uo,C as io,f as po,s as w,u as Po,L as To,e as mo,a as so,j as _o,p as eo}from"./pool.1de44b14.js";import{C as Bo,V as G}from"./index.f7fd0e68.js";import{D as t}from"./decimal.0bdeb344.js";function co(e){const r={launchpad:g[e||"Sui"].launchpad,ido:g[e||"Sui"].ido,xcetus:g[e||"Sui"].xcetus,xcetus_dividends:g[e||"Sui"].xcetus_dividends,cetus_faucet:g[e||"Sui"].cetus_faucet,xtoken:g[e||"Sui"].xtoken,xtoken_dividends:g[e||"Sui"].xtoken_dividends,token_faucet:g[e||"Sui"].token_faucet,booster:g[e||"Sui"].booster,maker_bonus:g[e||"Sui"].maker_bonus,liquidity_stratefy:g[e||"Sui"].liquidity_stratefy,vaults:g[e||"Sui"].vaults},a={fullRpcUrl:localStorage.getItem(`${e}-currentRpclocal2`)||g[e||"Sui"].fullRpcUrl,simulationAccount:g[e||"Sui"].simulationAccount,cetus_config:g[e||"Sui"].cetus_config,clmm_pool:g[e||"Sui"].clmm_pool,integrate:g[e||"Sui"].integrate,deepbook:g[e||"Sui"].deepbook,deepbook_endpoint_v2:g[e||"Sui"].deepbook_endpoint_v2,aggregatorUrl:g[e||"Sui"].aggregatorUrl},s=new ko(a),n=wo(new Bo(r,s)),p=qo(),j=So(()=>p);bo(()=>{j.value.address&&(s.senderAddress=j.value.address)});const Z=async()=>{console.log(n,"sdk###");const o=await n.Vaults.getVaultList();return o&&o.data||[]},D=async o=>await n.Vaults.getVault(o),i=async o=>{if(console.log(o,"###coinType"),s.senderAddress){const l=await n.ClmmSDK.fullClient.getBalance({owner:s.senderAddress,coinType:o});return l&&l.totalBalance}else return 0},m=o=>({transactionBlock:o,options:{showEffects:!0,showEvents:!0,showInput:!0,showRawInput:!0,showObjectChanges:!0,showBalanceChanges:!0}});return{getAutoPools:Z,getLpBalance:i,getVault:async o=>{const l=await n.Vaults.getVault(o);return console.log(l,"vault##292"),l},deposit:async o=>{const{lowerTick:l,upperTick:S,slippage:T,rewarder_coin_types:v,isOnlyA:b,isOnlyB:k,currentTickIndex:B,decimal_b:C}=o;console.log(o,"params###");let d=o.fix_amount_a,y,c,f,x=B;if(b||k){const u=await n.Vaults.calculateDepositSwapAmount({lowerTick:l,upperTick:S,curSqrtPrice:o.curSqrtPrice,fix_amount_a:o.fix_amount_a,input_amount:o.coinAmount,coinTypeA:o.coinTypeA,coinTypeB:o.coinTypeB,clmm_pool:o.clmm_pool,use_route:!0},!0);console.log(u,"swapResut##211"),u?(c=new N(u.afterSqrtPrice),y=u.fixAmountA===d?new N(z(o.coinAmount).sub(u.swapInAmount).toString()):new N(u.swapOutAmount),f={swap_amount:u.swapInAmount,a2b:d,input_amount:o.coinAmount,route_obj:u.routeObj},d=u.fixAmountA,x=uo.sqrtPriceX64ToTickIndex(new N(u.afterSqrtPrice))):(c=new N(o.curSqrtPrice),y=new N(o.coinAmount))}else c=o.curSqrtPrice,y=new N(o.coinAmount);let Q,I,A;console.log(l,B,S,"####138"),x>=l&&x<=S?(Q=io.estLiquidityAndcoinAmountFromOneAmounts(l,S,y,d,!0,T,c),I=d?y.toString():Q.tokenMaxA.toString(),A=d?Q.tokenMaxB.toString():y.toString()):x<l?(I=y.toNumber(),A=0):x>S&&(I=0,A=y.toNumber()),console.log({vault_id:o.id,clmm_pool:o.clmm_pool,lp_token_type:o.lp_token_type,amount_a:I,amount_b:A,fix_amount_a:d,slippage:T,coinTypeA:o.coinTypeA,coinTypeB:o.coinTypeB,rewarder_coin_types:[],swapParams:f},"params171");const h=await n.Vaults.deposit({lowerTick:l,upperTick:S,vault_id:o.id,clmm_pool:o.clmm_pool,lp_token_type:o.lp_token_type,amount_a:I,amount_b:A,fix_amount_a:d,slippage:T,coinTypeA:o.coinTypeA,coinTypeB:o.coinTypeB,swapParams:f});return m(h)},remove:async o=>{const{lowerTick:l,upperTick:S,coinTypeA:T,coinTypeB:v,receiveAmount:b,clmm_pool:k,lowerSqrtPrice:B,upperSqrtPrice:C,fix_amount_a:d,curSqrtPrice:y,slippage:c,rewarder_coin_types:f,id:x,liquidity:Q,swapParams:I,isOnlyA:A,isOnlyB:h,sliderVal:u,positionInfo:F}=o;console.log(u,"sliderVal##");const U=await D(x),H=await s.Pool.getPool(U.pool_id);let L,P,V,M,E,X,q;if(console.log(b,"##receiveAmount"),A||h){if(L=await n.Vaults.calculateRemoveSwapAmount({lowerTick:l,upperTick:S,curSqrtPrice:H.current_sqrt_price,fix_amount_a:d,receive_amount:b,coinTypeA:T,coinTypeB:v,clmm_pool:k,use_route:!0}),console.log(L,"swapResut###"),L){const O=G.get_share_liquidity_by_amount(U,F.balance);P=io.getCoinAmountFromLiquidity(new N(u==100?O:L.liquidity),new N(H.current_sqrt_price),B,C,!1),V=G.get_protocol_fee_amount(U,P.coinA.toString()),M=G.get_protocol_fee_amount(U,P.coinB.toString()),E=u==100?F.balance:G.get_lp_amount_by_liquidity(U,L.liquidity),X=z(P.coinA.toString()).mul(z(1-o.slippage)),q=z(P.coinB.toString()).mul(z(1-o.slippage)),console.log(X.toString(),"##minAmountA"),console.log(q.toString(),"##minAmountA")}}else{const O=G.get_share_liquidity_by_amount(U,u==100?F.balance:o.lpTokenAmount);console.log(O,"#removeLiquidity"),P=io.getCoinAmountFromLiquidity(new N(O),y,B,C,!1),P=io.getCoinAmountFromLiquidity(new N(O),y,B,C,!1),console.log(P,"#coinAmountscoinAmounts"),E=o.lpTokenAmount,X=z(P.coinA.toString()).mul(z(1-o.slippage)),q=z(P.coinB.toString()).mul(z(1-o.slippage)),console.log(V,M,"##protocol_fee_amount_b"),console.log(X.toString(),"##minAmountA"),console.log(q.toString(),"##minAmountA"),console.log(o,"params###246")}console.log(E,"lpTokenAmount remove");const Y={vault_id:o.id,clmm_pool:o.clmm_pool,lp_token_type:o.lp_token_type,coinTypeA:o.coinTypeA,coinTypeB:o.coinTypeB,lp_token_amount:E,min_amount_a:po(X,0)||"",min_amount_b:po(q,0)||"",rewarder_coin_types:[],slippage:o.slippage};console.log(Y,"##removeParams"),(A||h)&&(Y.swapParams={a2b:!d,swap_amount:L==null?void 0:L.swapInAmount,route_obj:L.routeObj});const $=await n.Vaults.remove(Y);return m($)},getAutoPool:D,calculateDepositSwapAmount:async o=>{const{lowerTick:l,upperTick:S,curSqrtPrice:T,fix_amount_a:v,input_amount:b,coinTypeA:k,coinTypeB:B,clmm_pool:C,slippage:d,decimals:y}=o;console.log(o,"params###");const c=await n.Vaults.calculateDepositSwapAmount({lowerTick:l,upperTick:S,curSqrtPrice:T,fix_amount_a:v,input_amount:b,coinTypeA:k,coinTypeB:B,clmm_pool:C,use_route:!0},!0);if(console.log(c,"##swapResut"),c){const f=new t(c.swapOutAmount);return{...c,swapOutAmountLimit:w(f.sub(f.mul(d)).toNumber(),y)}}return c},calculateRemoveSwapAmount:async o=>{const{lowerTick:l,upperTick:S,curSqrtPrice:T,fix_amount_a:v,receiveAmount:b,coinTypeA:k,coinTypeB:B,clmm_pool:C,slippage:d,decimals:y}=o;console.log(o,"params###");const c=await n.Vaults.calculateRemoveSwapAmount({lowerTick:l,upperTick:S,curSqrtPrice:T,fix_amount_a:v,receive_amount:b,coinTypeA:k,coinTypeB:B,clmm_pool:C,use_route:!0});if(console.log(c,"###swapResut calculateRemoveSwapAmount"),c){const f=new t(c.swapOutAmount);return{...c,swapOutAmountLimit:w(f.sub(f.mul(d)).toNumber(),y)}}return c}}}const Lo=fo("autoPool",{state:()=>({autoPoolList:[],autoPoolObj:{},positionInfoObj:{},positionInfoList:[],positionUSDObj:{},apyObj:{},currentAutoPoolStatus:"STATUS_RUNNING",slippage:localStorage.getItem("cetus-auto-slippage")||"0.1"}),getters:{getPoolStore(){return Po()}},actions:{async getAutoPoolList(){const r=await co("Sui").getAutoPools();console.log(r,"list###");const a=this.getPoolStore,s=r.map(n=>({...a.poolConfigObj[n.pool_id],id:n.id,lp_token_type:n.lp_token_type,autoPoolPositionInfo:n.positins[0],is_pause:n.is_pause,total_supply:n.total_supply,liquidity:n.liquidity,protocol_fee_rate:n.protocol_fee_rate,max_quota:n.max_quota,quota_based_type:To(n.quota_based_type).full_address}));this.autoPoolList=s,this.autoPoolObj=Object.fromEntries(s.map((n,p)=>[n.address,n])),this.getMyAutoPoolPosition(),console.log(s,"##autoPoolList")},async getMyAutoPoolPosition(){var p,j,Z;const e=co("Sui"),r=this.autoPoolList,a=mo("Sui"),s=[],{RATES:n}=this.getPoolStore;for(let D=0;D<r.length;D++){const i=r[D];console.log(i,"poolINfo###");const m=await a.getPool(i.address),_=await e.getLpBalance(r[D].lp_token_type);console.log(_,"balance##");const R=(await a.getTokenListByCoinType([r[D].lp_token_type]))[0];console.log(R,"lpInfo##");const J=((p=n[i.coinA.address])==null?void 0:p.price)||"",W=((j=n[i.coinB.address])==null?void 0:j.price)||"",K=i.autoPoolPositionInfo.tick_lower_index,o=i.autoPoolPositionInfo.tick_upper_index,l={tick_lower_index:K,tick_upper_index:o,current_sqrt_price:m==null?void 0:m.current_sqrt_price,liquidity:Number(_)>0?G.get_share_liquidity_by_amount({liquidity:i==null?void 0:i.liquidity,total_supply:i==null?void 0:i.total_supply},_):0},S=await a.getCoinAmountFromLiquidity({pool:{...i,current_sqrt_price:m==null?void 0:m.current_sqrt_price},position:l,roundUp:!1});console.log(S,"##amountInfo");const T=S.coinaAmount,v=S.coinbAmount,b=T,k=v,B=i.coinA.decimals,C=i.coinB.decimals,d=a.TickMath.tickIndexToPrice(Number(K),B,C).toString(),y=a.TickMath.tickIndexToPrice(Number(o),B,C).toString(),c=new t(J).mul(new t(T)).toNumber(),f=new t(W).mul(new t(v)).toNumber(),x=c>0&&c<.01?"<$0.01":`$${so(w(c,2))}`,Q=f>0&&f<.01?"<$0.01":`$${so(w(f,2))}`,I=uo.sqrtPriceX64ToPrice(m.current_sqrt_price,B,C),A=await a.getCoinAmountFromLiquidity({pool:{...i,tick_lower_index:K,tick_upper_index:o,current_sqrt_price:m==null?void 0:m.current_sqrt_price},position:{...l,liquidity:i.liquidity},roundUp:!1}),h=new t(A.coinaAmount).toNumber(),u=new t(A.coinbAmount).toNumber();console.log(h,u,I.toString(),"###116");const F=w(new t(h).mul(new t(J)).toNumber(),2),U=w(new t(u).mul(new t(W)).toNumber(),2);console.log(m,"newPool##"),console.log(h,u,"###131");const{ratioA:H,ratioB:L}=G.calculateDepositRatio(K,o,new N.BN(m==null?void 0:m.current_sqrt_price));console.log(H.toString(),L.toString(),"###139");const P=Number(w(H.toString(),2))*100,V=100-P;console.log(h,u,P,V,"###147");let M=0;Number(_)>0&&(M=new t(_).div(Math.pow(10,R.decimals)));const E=J&&W?w(new t(c).add(new t(f)).toString(),2):"--",X=i.total_supply;let q=0;M>0&&X>0&&(q=new t(M).mul(Math.pow(10,R.decimals)).div(new t(X)).mul(100).toNumber()),console.log(q,"##myShare");const Y=new t(1).div(Math.pow(10,i.decimals)).toNumber();let $=0;if(q>1)$=w(q,2);else if(q>0&&q<Y)$=`<${Y}`;else if(q==0)$=0;else{const ao=_o(q),Ao=ao==-1?2:ao+2;$=w(q,Ao)}console.log(_,M.toString(),"###balance");const O=(await a.getTokenListByCoinType([i.quota_based_type]))[0],oo=eo(i.max_quota,O.decimals);console.log(i.quota_based_type,O,oo,"##quoteCoinInfo");const to=O.address==i.coin_b_address,no=to?new t(A.coinaAmount).mul(i.price).add(A.coinbAmount):new t(A.coinaAmount).mul(1/i.price).add(A.coinbAmount),go=no.toNumber(),lo=oo,yo=to?new t(b).mul(i.price).add(k):new t(b).mul(1/i.price).add(k),ro=new t(lo).sub(yo).mul(W).toNumber();console.log(ro,"##remainingTokenUSD"),console.log(no.toNumber(),"#poolTokenNum"),this.positionInfoObj[i.id]={tick_lower_index:K,tick_upper_index:o,current_sqrt_price:m.current_sqrt_price,myLiquidity:eo(_,R.decimals),amountA:b,amountB:k,...i,lpInfo:R,myAmountAUSD:x,myAmountBUSD:Q,myLiquidityUSD:E,myShare:$,minPrice:d,maxPrice:y,poolCoinARatio:P,poolCoinBRatio:V,poolCoinANum:h,poolCoinBNum:u,poolCoinAUSD:F,poolCoinBUSD:U,quoteUSD:lo,poolUSD:Number(F)+Number(U),balance:_,quoteCoinInfo:O,remainingTokenUSD:ro},s.push({tick_lower_index:K,tick_upper_index:o,current_sqrt_price:(Z=i==null?void 0:i.object)==null?void 0:Z.current_sqrt_price,myLiquidity:eo(_,R.decimals),amountA:b,amountB:k,...i,lpInfo:R,myAmountAUSD:x,myAmountBUSD:Q,myLiquidityUSD:E,myShare:$,minPrice:d,maxPrice:y,poolCoinARatio:P,poolCoinBRatio:V,poolCoinANum:h,poolCoinBNum:u,poolCoinAUSD:F,poolCoinBUSD:U,quoteUSD:lo,poolUSD:go,balance:_})}this.positionInfoList=s,console.log(this.positionInfoObj,"this.positionInfoObj###"),console.log(this.positionInfoList,"###this.positionInfoList")},async updatePositionItem(e){var O,oo;const r=co("Sui"),a=mo("Sui"),s=await r.getAutoPool(e),n=await a.getPool(s.pool_id);console.log("newPoolInfo:",s),console.log("newPool:",n),console.log("this.positionInfoObj[id]:",this.positionInfoObj[e]);const p={...this.positionInfoObj[e],autoPoolPositionInfo:s.positins[0]},j=await r.getLpBalance(p.lp_token_type),Z=(await a.getTokenListByCoinType([p.lp_token_type]))[0];console.log(j,"###balance updatePositionItem");const D=p.autoPoolPositionInfo.tick_lower_index,i=p.autoPoolPositionInfo.tick_upper_index,m={tick_lower_index:D,tick_upper_index:i,current_sqrt_price:n.current_sqrt_price,liquidity:G.get_share_liquidity_by_amount({liquidity:s==null?void 0:s.liquidity,total_supply:s==null?void 0:s.total_supply},j)},_=a.getCoinAmountFromLiquidity({pool:{current_sqrt_price:n.current_sqrt_price,...p},position:m,roundUp:!1});console.log(_,"amountInfo###");const R=_.coinaAmount,J=_.coinbAmount,{RATES:W}=this.getPoolStore,K=s.total_supply,o=uo.sqrtPriceX64ToPrice(n.current_sqrt_price,p.coinA.decimals,p.coinB.decimals),l=2,S=2,T=((O=W[p.coinA.address])==null?void 0:O.price)||0,v=((oo=W[p.coinB.address])==null?void 0:oo.price)||0,b=new t(T).mul(new t(_==null?void 0:_.coinaAmount)).toNumber(),k=new t(v).mul(new t(_==null?void 0:_.coinbAmount)).toNumber(),B=b>0&&b<.01?"<$0.01":`$${so(w(b,2))}`,C=k>0&&k<.01?"<$0.01":`$${so(w(k,2))}`;let d=new t(0);Number(j)>0&&(d=new t(j).div(Math.pow(10,Z.decimals)));const y=T&&v?w(new t(b).add(new t(k)).toString(),2):"--",c=new t(d).mul(Math.pow(10,p.lpInfo.decimals)).div(new t(K)).mul(100).toNumber();console.log(c,"##myShare");const f=new t(1).div(Math.pow(10,p.decimals)).toNumber();let x=0;if(c>1)x=w(c,2);else if(c>0&&c<f)x=`<${f}`;else if(c==0)x=0;else{const to=_o(c),no=to==-1?2:to+2;x=w(c,no)}const Q=uo.sqrtPriceX64ToPrice(n.current_sqrt_price,l,S),I=await a.getCoinAmountFromLiquidity({pool:{...p,tick_lower_index:D,tick_upper_index:i,current_sqrt_price:n==null?void 0:n.current_sqrt_price},position:{...m,liquidity:s.liquidity},roundUp:!1}),A=new t(I.coinaAmount).toNumber(),h=new t(I.coinbAmount).toNumber();console.log(A,h,Q.toString(),"###116");const u=w(new t(A).mul(new t(T)).toNumber(),2),F=w(new t(h).mul(new t(v)).toNumber(),2);console.log(n,"newPool##"),console.log(A,h,"###poolCoinBNum");const{ratioA:U,ratioB:H}=G.calculateDepositRatio(D,i,new N.BN(n==null?void 0:n.current_sqrt_price));console.log(U.toString(),H.toString(),"###139");const L=Number(w(U.toString(),2))*100,P=100-L,V=(await a.getTokenListByCoinType([s.quota_based_type]))[0],M=eo(s.max_quota,V.decimals);console.log(p.quota_based_type,V,M,"##quoteCoinInfo");const E=V.address==s.coin_b_address;(E?new t(I.coinaAmount).mul(s.price).add(I.coinbAmount):new t(I.coinaAmount).mul(1/s.price).add(I.coinbAmount)).toNumber();const q=M,Y=E?new t(R).mul(s.price).add(J):new t(R).mul(1/s.price).add(J),$=new t(q).sub(Y).mul(v).toNumber();console.log($,"##remainingTokenUSD"),this.positionInfoObj[e]={...p,tick_lower_index:D,tick_upper_index:i,current_sqrt_price:n.current_sqrt_price,myLiquidity:eo(j,Z.decimals),amountA:R,amountB:J,myShare:x,myAmountAUSD:B,myAmountBUSD:C,myLiquidityUSD:y,poolCoinARatio:L,poolCoinBRatio:P,poolCoinANum:A,poolCoinBNum:h,poolCoinAUSD:u,poolCoinBUSD:F,quoteUSD:q,poolUSD:Number(u)+Number(F),balance:j,price:o,quoteCoinInfo:V,remainingTokenUSD:$},console.log(this.positionInfoObj[e],"###this.positionInfoObj[id]")},async getAutoPoolAPY(){try{const{data:e}=await fetch(`${g.Sui.api}/v2/sui/auto_pools`).then(r=>r.json());e&&e.pools&&e.pools.length>0&&(this.apyObj=Object.fromEntries(e.pools.map((r,a)=>[r.object_id,{...r,apr:r.apr.replace("%","")>0&&r.apr.replace("%","")<.01?"<0.01%":w(r.apr.replace("%",""),2)+"%",resultApr:r.apr.replace("%","")}])),console.log(this.apyObj,"data##"))}catch{this.apyObj={}}},async getVault(e){const r=co("Sui"),{status:a}=await r.getVault(e);this.currentAutoPoolStatus=a,this.updatePositionItem(e),console.log(a,"status##")},setSlippage(e){console.log(e,"slippage##"),this.slippage=e,localStorage.setItem("cetus-auto-slippage",e)}}});export{co as a,Lo as u};
