import{a6 as Y,l as z,T as G,a7 as H}from"./entry.810bcc8c.js";import{c,a as Q}from"./sha256.1749b4df.js";import{I as X,C as F,e as Z,J as U,l as K,u as N,b as J,a as C,s as h,K as W,p as M}from"./pool.370b76e0.js";import{C as oo,V as $}from"./index.bc03a913.js";import{D as l}from"./decimal.0e8aa3f1.js";function E(t){const s={launchpad:c[t||"Sui"].launchpad,ido:c[t||"Sui"].ido,xcetus:c[t||"Sui"].xcetus,xcetus_dividends:c[t||"Sui"].xcetus_dividends,cetus_faucet:c[t||"Sui"].cetus_faucet,xtoken:c[t||"Sui"].xtoken,xtoken_dividends:c[t||"Sui"].xtoken_dividends,token_faucet:c[t||"Sui"].token_faucet,booster:c[t||"Sui"].booster,maker_bonus:c[t||"Sui"].maker_bonus,liquidity_stratefy:c[t||"Sui"].liquidity_stratefy,vaults:c[t||"Sui"].vaults},g={fullRpcUrl:localStorage.getItem(`${t}-currentRpclocal2`)||c[t||"Sui"].fullRpcUrl,simulationAccount:c[t||"Sui"].simulationAccount,cetus_config:c[t||"Sui"].cetus_config,clmm_pool:c[t||"Sui"].clmm_pool,integrate:c[t||"Sui"].integrate,deepbook:c[t||"Sui"].deepbook,deepbook_endpoint_v2:c[t||"Sui"].deepbook_endpoint_v2,aggregatorUrl:c[t||"Sui"].aggregatorUrl},i=new X(g),n=Y(new oo(s,i)),a=Q(),f=z(()=>a);G(()=>{f.value.address&&(i.senderAddress=f.value.address)});const I=async()=>{console.log(n,"sdk###");const o=await n.Vaults.getVaultList();return o&&o.data||[]},B=async o=>await n.Vaults.getVault(o),A=async o=>{if(console.log(o,"###coinType"),i.senderAddress){const _=await n.ClmmSDK.fullClient.getBalance({owner:i.senderAddress,coinType:o});return _&&_.totalBalance}else return 0},e=o=>({transactionBlock:o,options:{showEffects:!0,showEvents:!0,showInput:!0,showRawInput:!0,showObjectChanges:!0,showBalanceChanges:!0}});return{getAutoPools:I,getLpBalance:A,deposit:async o=>{const{lowerTick:_,upperTick:x,coinAmount:S,fix_amount_a:d,slippage:m,curSqrtPrice:b,rewarder_coin_types:j}=o,q=F.estLiquidityAndcoinAmountFromOneAmounts(_,x,S,d,!0,m,b),y=d?S.toString():q.tokenMaxA.toString(),p=d?q.tokenMaxB.toString():S.toString();console.log({vault_id:o.id,clmm_pool:o.clmm_pool,lp_token_type:o.lp_token_type,amount_a:y,amount_b:p,fix_amount_a:d,slippage:m,coinTypeA:o.coinTypeA,coinTypeB:o.coinTypeB,rewarder_coin_types:[]},"params###");const u=await n.Vaults.deposit({vault_id:o.id,clmm_pool:o.clmm_pool,lp_token_type:o.lp_token_type,amount_a:y,amount_b:p,fix_amount_a:d,slippage:m,coinTypeA:o.coinTypeA,coinTypeB:o.coinTypeB,rewarder_coin_types:[]});return e(u)},remove:async o=>{const{lowerSqrtPrice:_,upperSqrtPrice:x,lpTokenAmount:S,curSqrtPrice:d,slippage:m,rewarder_coin_types:b,id:j,liquidity:q}=o;console.log(o.lpTokenAmount.toString(),"params##");const y=await B(j),p=await i.Pool.getPool(y.pool_id),u=F.getCoinAmountFromLiquidity(q,new Z(p.current_sqrt_price),_,x,!1),k=U(u.coinA.toString()).mul(U(1-m)),T=U(u.coinB.toString()).mul(U(1-m));console.log(u.coinA.toString(),"##.toString()"),console.log(o.lpTokenAmount.toString(),k.toString(),T.toString(),"params##");const L=$.get_protocol_fee_amount(y,u.coinA.toString()),P=$.get_protocol_fee_amount(y,u.coinB.toString());console.log(y,"##vault"),console.log(p,"newPool##"),console.log(k.toString(),T.toString(),P,L,"###protocol_fee_amount_a");const D=await n.Vaults.remove({vault_id:o.id,clmm_pool:o.clmm_pool,lp_token_type:o.lp_token_type,coinTypeA:o.coinTypeA,coinTypeB:o.coinTypeB,lp_token_amount:S.toString(),min_amount_a:K(U(u.coinA.toString()).sub(L).toString(),0)||"",min_amount_b:K(U(u.coinB.toString()).sub(P).toString(),0)||"",rewarder_coin_types:[]});return e(D)},getAutoPool:B}}const lo=H("autoPool",{state:()=>({autoPoolList:[],autoPoolObj:{},positionInfoObj:{},positionInfoList:[],positionUSDObj:{},apyObj:{}}),getters:{getPoolStore(){return N()}},actions:{async getAutoPoolList(){const s=await E("Sui").getAutoPools();console.log(s,"list###");const g=this.getPoolStore,i=s.map(n=>({...g.poolConfigObj[n.pool_id],id:n.id,lp_token_type:n.lp_token_type,autoPoolPositionInfo:n.positins[0],is_pause:n.is_pause,total_supply:n.total_supply,liquidity:n.liquidity,protocol_fee_rate:n.protocol_fee_rate}));this.autoPoolList=i,this.autoPoolObj=Object.fromEntries(i.map((n,a)=>[n.address,n])),this.getMyAutoPoolPosition(),console.log(i,"##autoPoolList")},async getMyAutoPoolPosition(){var a,f,I,B;const t=E("Sui"),s=this.autoPoolList,g=J("Sui"),i=[],{RATES:n}=this.getPoolStore;for(let A=0;A<s.length;A++){const e=s[A];console.log(e,"poolINfo###");const r=await g.getPool(e.address),w=await t.getLpBalance(s[A].lp_token_type);console.log(w,"balance##");const o=(await g.getTokenListByCoinType([s[A].lp_token_type]))[0];console.log(o,"lpInfo##");const _=((a=n[e.coinA.address])==null?void 0:a.price)||"",x=((f=n[e.coinB.address])==null?void 0:f.price)||"",S=e.autoPoolPositionInfo.tick_lower_index,d=e.autoPoolPositionInfo.tick_upper_index;console.log(s[A],"list[i]"),console.log((I=e==null?void 0:e.object)==null?void 0:I.current_sqrt_price,"##poolInfo?.object?.current_sqrt_price");const m={tick_lower_index:S,tick_upper_index:d,current_sqrt_price:r==null?void 0:r.current_sqrt_price,liquidity:Number(w)>0?$.get_share_liquidity_by_amount({liquidity:e==null?void 0:e.liquidity,total_supply:e==null?void 0:e.total_supply},w):0};console.log(e,"##position");const b=g.getCoinAmountFromLiquidity({pool:{...e,current_sqrt_price:r==null?void 0:r.current_sqrt_price},position:m,roundUp:!1}),j=b.coinaAmount,q=b.coinbAmount;console.log(e.protocol_fee_rate,"##newPoolInfo.protocol_fee_rate");const y=j,p=q,u=new l(_).mul(new l(j)).toNumber(),k=new l(x).mul(new l(q)).toNumber(),T=u>0&&u<.01?"<$0.01":`$${C(h(u,2))}`,L=k>0&&k<.01?"<$0.01":`$${C(h(k,2))}`;let P=0;Number(w)>0&&(P=new l(w).div(Math.pow(10,o.decimals)));const D=_&&x?h(new l(u).add(new l(k)).toString(),2):"",R=e.total_supply;let v=0;P>0&&R>0&&(v=new l(P).mul(Math.pow(10,o.decimals)).div(new l(R)).mul(100).toNumber()),console.log(v,"##myShare");const V=new l(1).div(Math.pow(10,e.decimals)).toNumber();let O=0;v>1?O=h(v,2):v>0&&v<V?O=`<${V}`:v==0?O=0:O=W(v,1),console.log(w,P.toString(),"###balance"),this.positionInfoObj[e.id]={tick_lower_index:S,tick_upper_index:d,current_sqrt_price:r.current_sqrt_price,myLiquidity:M(w,o.decimals),amountA:y,amountB:p,...e,lpInfo:o,myAmountAUSD:T,myAmountBUSD:L,myLiquidityUSD:D,myShare:O},i.push({tick_lower_index:S,tick_upper_index:d,current_sqrt_price:(B=e==null?void 0:e.object)==null?void 0:B.current_sqrt_price,myLiquidity:M(w,o.decimals),amountA:y,amountB:p,...e,lpInfo:o,myAmountAUSD:T,myAmountBUSD:L,myLiquidityUSD:D,myShare:O})}this.positionInfoList=i,console.log(this.positionInfoObj,"this.positionInfoObj###"),console.log(this.positionInfoList,"###this.positionInfoList")},async updatePositionItem(t){var L,P;const s=E("Sui"),g=J("Sui"),i=await s.getAutoPool(t),n=await g.getPool(i.pool_id);console.log("newPoolInfo:",i),console.log("this.positionInfoObj[id]:",this.positionInfoObj[t]);const a={...this.positionInfoObj[t],autoPoolPositionInfo:i.positins[0]},f=await s.getLpBalance(a.lp_token_type),I=(await g.getTokenListByCoinType([a.lp_token_type]))[0];console.log(f,"###balance updatePositionItem");const B=a.autoPoolPositionInfo.tick_lower_index,A=a.autoPoolPositionInfo.tick_upper_index,e={tick_lower_index:B,tick_upper_index:A,current_sqrt_price:n.current_sqrt_price,liquidity:$.get_share_liquidity_by_amount({liquidity:i==null?void 0:i.liquidity,total_supply:i==null?void 0:i.total_supply},f)},r=g.getCoinAmountFromLiquidity({pool:{current_sqrt_price:n.current_sqrt_price,...a},position:e,roundUp:!1});console.log(r,"amountInfo###"),r.coinaAmount,r.coinbAmount;const w=r.coinaAmount,o=r.coinbAmount,{RATES:_}=this.getPoolStore,x=i.total_supply,S=((L=_[a.coinA.address])==null?void 0:L.price)||0,d=((P=_[a.coinB.address])==null?void 0:P.price)||0,m=new l(S).mul(new l(r==null?void 0:r.coinaAmount)).toNumber(),b=new l(d).mul(new l(r==null?void 0:r.coinbAmount)).toNumber(),j=m>0&&m<.01?"<$0.01":`$${C(h(m,2))}`,q=b>0&&b<.01?"<$0.01":`$${C(h(b,2))}`;let y=new l(0);Number(f)>0&&(y=new l(f).div(Math.pow(10,I.decimals)));const p=new l(y).mul(Math.pow(10,a.lpInfo.decimals)).div(new l(x)).mul(100).toNumber();let u=0;const k=new l(1).div(Math.pow(10,a.decimals)).toNumber(),T=S&&d?h(new l(m).add(new l(b)).toString(),2):"";p>1?u=h(p,2):p>0&&p<k?u=`<${k}`:u=W(p,1),this.positionInfoObj[t]={...a,tick_lower_index:B,tick_upper_index:A,current_sqrt_price:n.current_sqrt_price,myLiquidity:M(f,I.decimals),amountA:w,amountB:o,myShare:u,myAmountAUSD:j,myAmountBUSD:q,myLiquidityUSD:T},console.log(this.positionInfoObj[t],"###this.positionInfoObj[id]")},async getAutoPoolAPY(){try{const{data:t}=await fetch(`${c.Sui.api}/v2/sui/auto_pools`).then(s=>s.json());t&&t.pools&&t.pools.length>0&&(this.apyObj=Object.fromEntries(t.pools.map((s,g)=>[s.object_id,{...s,apr:s.apr.replace("%","")>0&&s.apr.replace("%","")<.01?"<0.01%":h(s.apr.replace("%",""),2)+"%",resultApr:s.apr.replace("%","")}])),console.log(this.apyObj,"data##"))}catch{this.apyObj={}}}}});export{E as a,lo as u};
