import{a6 as h,l as v,T as D,a7 as O}from"./entry.e5b3353b.js";import{c as s,a as T}from"./sha256.b0541a2e.js";import{G as C,C as j,H as x,k as U,u as F,b as L,s as I}from"./pool.72b09d47.js";import{C as M}from"./index.8b3fdfe0.js";import{D as a}from"./decimal.0e8aa3f1.js";function B(o){const u={launchpad:s[o||"Sui"].launchpad,ido:s[o||"Sui"].ido,xcetus:s[o||"Sui"].xcetus,xcetus_dividends:s[o||"Sui"].xcetus_dividends,cetus_faucet:s[o||"Sui"].cetus_faucet,xtoken:s[o||"Sui"].xtoken,xtoken_dividends:s[o||"Sui"].xtoken_dividends,token_faucet:s[o||"Sui"].token_faucet,booster:s[o||"Sui"].booster,maker_bonus:s[o||"Sui"].maker_bonus,liquidity_stratefy:s[o||"Sui"].liquidity_stratefy,mirror_pool:s[o||"Sui"].mirror_pool},n={fullRpcUrl:localStorage.getItem(`${o}-currentRpclocal2`)||s[o||"Sui"].fullRpcUrl,simulationAccount:s[o||"Sui"].simulationAccount,cetus_config:s[o||"Sui"].cetus_config,clmm_pool:s[o||"Sui"].clmm_pool,integrate:s[o||"Sui"].integrate,deepbook:s[o||"Sui"].deepbook,deepbook_endpoint_v2:s[o||"Sui"].deepbook_endpoint_v2,aggregatorUrl:s[o||"Sui"].aggregatorUrl},i=new C(n),e=h(new M(u,i)),r=T(),l=v(()=>r);D(()=>{l.value.address&&(i.senderAddress=l.value.address)});const d=async()=>{console.log(e,"sdk###");const t=await e.MirrorPool.getVaultList();return t&&t.data||[]},p=async t=>{console.log(t,"###coinType");const _=await e.ClmmSDK.fullClient.getBalance({owner:i.senderAddress,coinType:t});return console.log(_,"allBalance###"),_&&_.totalBalance},m=t=>({transactionBlock:t,options:{showEffects:!0,showEvents:!0,showInput:!0,showRawInput:!0,showObjectChanges:!0,showBalanceChanges:!0}});return{getAutoPools:d,getLpBalance:p,deposit:async t=>{const{lowerTick:_,upperTick:y,coinAmount:f,fix_amount_a:c,slippage:k,curSqrtPrice:w}=t;console.log(t,"params###");const A=j.estLiquidityAndcoinAmountFromOneAmounts(_,y,f,c,!0,k,w),P=c?f.toString():A.tokenMaxA.toString(),q=c?A.tokenMaxB.toString():f.toString(),b=await e.MirrorPool.deposit({vault_id:t.id,clmm_pool:t.clmm_pool,lp_token_type:t.lp_token_type,amount_a:P,amount_b:q,fix_amount_a:c,slippage:k,coinTypeA:t.coinTypeA,coinTypeB:t.coinTypeB});return m(b)},remove:async t=>{const{lowerSqrtPrice:_,upperSqrtPrice:y,lpTokenAmount:f,curSqrtPrice:c,slippage:k}=t,w=j.getCoinAmountFromLiquidity(f,c,_,y,!0),A=x(w.coinA.toString()).mul(x(1-k)),P=x(w.coinB.toString()).mul(x(1-k));console.log(t.lpTokenAmount.toString(),A.toString(),P.toString(),"params##");const q=await e.MirrorPool.remove({vault_id:t.id,clmm_pool:t.clmm_pool,lp_token_type:t.lp_token_type,coinTypeA:t.coinTypeA,coinTypeB:t.coinTypeB,lp_token_amount:f.toString(),min_amount_a:U(A.toString(),0)||"",min_amount_b:U(P.toString(),0)||""});return m(q)}}}const H=O("autoPool",{state:()=>({autoPoolList:[],positionInfoObj:{},positionInfoList:[],positionUSDObj:{}}),getters:{getPoolStore(){return F()}},actions:{async getAutoPoolList(){const u=await B("Sui").getAutoPools();console.log(u,"list###");const n=this.getPoolStore,i=u.map(e=>({...n.poolConfigObj[e.pool_id],id:e.id,lp_token_type:e.lp_token_type,autoPoolPositionInfo:e.positins[0]}));this.autoPoolList=i,console.log(i,"##autoPoolList")},async getMyAutoPoolPosition(){const o=B("Sui"),u=this.autoPoolList,n=L("Sui"),i=[];for(let e=0;e<u.length;e++){const r=u[e],l=await o.getLpBalance(u[e].lp_token_type);console.log(l,"###balance");const d=r.autoPoolPositionInfo.tick_lower_index,p=r.autoPoolPositionInfo.tick_upper_index,m={tick_lower_index:d,tick_upper_index:p,current_sqrt_price:r.object.current_sqrt_price,liquidity:l},S=n.getCoinAmountFromLiquidity({pool:{current_sqrt_price:r.object.current_sqrt_price,...r},position:m,roundUp:!1}),g=S.coinaAmount,t=S.coinbAmount;this.positionInfoObj[r.address]={tick_lower_index:d,tick_upper_index:p,current_sqrt_price:r.object.current_sqrt_price,myLiquidity:l,amountA:g,amountB:t,...r},i.push({tick_lower_index:d,tick_upper_index:p,current_sqrt_price:r.object.current_sqrt_price,myLiquidity:l,amountA:g,amountB:t,...r})}this.positionInfoList=i,console.log(this.positionInfoObj,"this.positionInfoObj###")},async getUserPositionUSD(){const{RATES:o}=this.getPoolStore,u=L("Sui");console.log(this.positionInfoList,"###this.positionInfoList"),this.positionInfoList.forEach(n=>{var q,b;const i=((q=o[n.coinA.address])==null?void 0:q.price)||0,e=((b=o[n.coinB.address])==null?void 0:b.price)||0,r=new a(i).mul(new a(n==null?void 0:n.amountA)).toString(),l=new a(e).mul(new a(n==null?void 0:n.amountB)).toString(),d=n.coinA.decimals,p=n.coinB.decimals,m=I(r,d),S=I(l,p),g=new a(m).add(new a(S)).toString(),t=n.myLiquidity,_=n.autoPoolPositionInfo.liquidity;console.log(t,_,"####totalLiquidity");const y=new a(t).div(new a(_)).div(100).toNumber(),f={tick_lower_index:n.tick_lower_index,tick_upper_index:n.tick_upper_index,current_sqrt_price:n.object.current_sqrt_price,liquidity:_},c=u.getCoinAmountFromLiquidity({pool:{current_sqrt_price:n.object.current_sqrt_price,...n},position:f,roundUp:!1});console.log(c,"poolAmountInfo##");const k=new a(i).mul(new a(c==null?void 0:c.coinaAmount)).toString(),w=new a(e).mul(new a(c==null?void 0:c.coinbAmount)).toString(),A=I(k,d),P=I(w,p);console.log(c,"###poolAmountInfo"),console.log(y,"###myShare"),console.log(r,l,"##myPosition"),this.positionInfoObj[n.address]={...this.positionInfoObj[n.address],myAmountAUSD:m,myAmountBUSD:S,myLiquidityUSD:g,myShare:y>0&&y<.01?"<0.01":y,poolAmoutnA:A,poolAmoutnB:P},console.log(this.positionInfoObj,"###this.positionInfoObj")})},async updatePositionItem(o){const u=B("Sui"),n=L("Sui"),i=this.positionInfoObj[o],e=await u.getLpBalance(i.lp_token_type),r=i.autoPoolPositionInfo.tick_lower_index,l=i.autoPoolPositionInfo.tick_upper_index,d={tick_lower_index:r,tick_upper_index:l,current_sqrt_price:i.object.current_sqrt_price,liquidity:e},p=n.getCoinAmountFromLiquidity({pool:{current_sqrt_price:i.object.current_sqrt_price,...i},position:d,roundUp:!1});console.log(p,"amountInfo###");const m=p.coinaAmount,S=p.coinbAmount;this.positionInfoObj[i.address]={...i,tick_lower_index:r,tick_upper_index:l,current_sqrt_price:i.object.current_sqrt_price,myLiquidity:e,amountA:m,amountB:S},this.positionInfoList.map(g=>g.address==o?{...i,tick_lower_index:r,tick_upper_index:l,current_sqrt_price:i.object.current_sqrt_price,myLiquidity:e,amountA:m,amountB:S}:g)},async getAutoPoolAPY(){const{data:o}=await fetch(`${s.Sui.api}/v2/sui/auto_pools`).then(u=>u.json());console.log(o,"data##")}}});export{B as a,H as u};
