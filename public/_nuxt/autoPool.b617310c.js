import{a6 as co,l as lo,T as uo,a7 as ro}from"./entry.ba1f590e.js";import{c as m,a as ao}from"./sha256.c37c9cf6.js";import{I as po,e as R,C as G,l as to,J as eo,u as _o,b as no,a as z,s as B,T as io,K as so,p as H}from"./pool.08f6d229.js";import{C as mo,V as X}from"./index.a8f0e2b0.js";import{D as t}from"./decimal.0e8aa3f1.js";function Q(e){const a={launchpad:m[e||"Sui"].launchpad,ido:m[e||"Sui"].ido,xcetus:m[e||"Sui"].xcetus,xcetus_dividends:m[e||"Sui"].xcetus_dividends,cetus_faucet:m[e||"Sui"].cetus_faucet,xtoken:m[e||"Sui"].xtoken,xtoken_dividends:m[e||"Sui"].xtoken_dividends,token_faucet:m[e||"Sui"].token_faucet,booster:m[e||"Sui"].booster,maker_bonus:m[e||"Sui"].maker_bonus,liquidity_stratefy:m[e||"Sui"].liquidity_stratefy,vaults:m[e||"Sui"].vaults},A={fullRpcUrl:localStorage.getItem(`${e}-currentRpclocal2`)||m[e||"Sui"].fullRpcUrl,simulationAccount:m[e||"Sui"].simulationAccount,cetus_config:m[e||"Sui"].cetus_config,clmm_pool:m[e||"Sui"].clmm_pool,integrate:m[e||"Sui"].integrate,deepbook:m[e||"Sui"].deepbook,deepbook_endpoint_v2:m[e||"Sui"].deepbook_endpoint_v2,aggregatorUrl:m[e||"Sui"].aggregatorUrl},s=new po(A),n=co(new mo(a,s)),d=ao(),I=lo(()=>d);uo(()=>{I.value.address&&(s.senderAddress=I.value.address)});const E=async()=>{console.log(n,"sdk###");const o=await n.Vaults.getVaultList();return o&&o.data||[]},T=async o=>await n.Vaults.getVault(o),i=async o=>{if(console.log(o,"###coinType"),s.senderAddress){const _=await n.ClmmSDK.fullClient.getBalance({owner:s.senderAddress,coinType:o});return _&&_.totalBalance}else return 0},y=o=>({transactionBlock:o,options:{showEffects:!0,showEvents:!0,showInput:!0,showRawInput:!0,showObjectChanges:!0,showBalanceChanges:!0}});return{getAutoPools:E,getLpBalance:i,deposit:async o=>{const{lowerTick:_,upperTick:P,slippage:b,rewarder_coin_types:v,isOnlyA:g,isOnlyB:q}=o;console.log(o,"params###");let u=o.fix_amount_a,r,S,U;if(g||q){const L=await n.Vaults.calculateDepositSwapAmount({lowerTick:_,upperTick:P,curSqrtPrice:o.curSqrtPrice,fix_amount_a:o.fix_amount_a,input_amount:o.coinAmount,coinTypeA:o.coinTypeA,coinTypeB:o.coinTypeB,clmm_pool:o.clmm_pool});console.log("swapResut: ",L),L?(S=new R(L.afterSqrtPrice),r=new R(L.swapOutAmount),S=new R(o.curSqrtPrice),U={swap_amount:L.swapInAmount,a2b:u},u=!u):(S=new R(o.curSqrtPrice),r=new R(o.coinAmount))}else S=o.curSqrtPrice,r=new R(o.coinAmount);const D=G.estLiquidityAndcoinAmountFromOneAmounts(_,P,r,u,!0,b,S),k=u?r.toString():D.tokenMaxA.toString(),x=u?D.tokenMaxB.toString():r.toString(),j=await n.Vaults.deposit({vault_id:o.id,clmm_pool:o.clmm_pool,lp_token_type:o.lp_token_type,amount_a:k,amount_b:x,fix_amount_a:u,slippage:b,coinTypeA:o.coinTypeA,coinTypeB:o.coinTypeB,rewarder_coin_types:[],swapParams:U});return y(j)},remove:async o=>{const{lowerTick:_,upperTick:P,coinTypeA:b,coinTypeB:v,receiveAmount:g,clmm_pool:q,lowerSqrtPrice:u,upperSqrtPrice:r,fix_amount_a:S,curSqrtPrice:U,slippage:D,rewarder_coin_types:k,id:x,liquidity:j,swapParams:L,isOnlyA:h,isOnlyB:f}=o,w=await T(x),$=await s.Pool.getPool(w.pool_id);let c,l,F,M,C;console.log(g,"##receiveAmount"),h||f?(c=await n.Vaults.calculateRemoveSwapAmount({lowerTick:_,upperTick:P,curSqrtPrice:$.current_sqrt_price,fix_amount_a:S,receive_amount:g,coinTypeA:b,coinTypeB:v,clmm_pool:q}),console.log(c,"swapResut###"),c&&(l=G.getCoinAmountFromLiquidity(new R(c.liquidity),new R($.current_sqrt_price),u,r,!1),F=X.get_protocol_fee_amount(w,l.coinA.toString()),M=X.get_protocol_fee_amount(w,l.coinB.toString()),C=X.get_lp_amount_by_liquidity(w,c.liquidity))):(l=G.getCoinAmountFromLiquidity(new R(j),U,u,r,!1),F=X.get_protocol_fee_amount(w,l.coinA.toString()),M=X.get_protocol_fee_amount(w,l.coinB.toString()),C=o.lpTokenAmount);const V={vault_id:o.id,clmm_pool:o.clmm_pool,lp_token_type:o.lp_token_type,coinTypeA:o.coinTypeA,coinTypeB:o.coinTypeB,lp_token_amount:C.toString(),min_amount_a:to(eo(l.coinA.toString()).sub(F).toString(),0)||"",min_amount_b:to(eo(l.coinB.toString()).sub(M).toString(),0)||"",rewarder_coin_types:[]};(h||f)&&(V.swapParams={a2b:!S,swap_amount:c==null?void 0:c.swapInAmount});const K=await n.Vaults.remove(V);return y(K)},getAutoPool:T,calculateDepositSwapAmount:async o=>{const{lowerTick:_,upperTick:P,curSqrtPrice:b,fix_amount_a:v,input_amount:g,coinTypeA:q,coinTypeB:u,clmm_pool:r}=o;return console.log(o,"params###"),await n.Vaults.calculateDepositSwapAmount({lowerTick:_,upperTick:P,curSqrtPrice:b,fix_amount_a:v,input_amount:g,coinTypeA:q,coinTypeB:u,clmm_pool:r})},calculateRemoveSwapAmount:async o=>{const{lowerTick:_,upperTick:P,curSqrtPrice:b,fix_amount_a:v,receiveAmount:g,coinTypeA:q,coinTypeB:u,clmm_pool:r}=o;return console.log(o,"params###"),await n.Vaults.calculateRemoveSwapAmount({lowerTick:_,upperTick:P,curSqrtPrice:b,fix_amount_a:v,receive_amount:g,coinTypeA:q,coinTypeB:u,clmm_pool:r})}}}const fo=ro("autoPool",{state:()=>({autoPoolList:[],autoPoolObj:{},positionInfoObj:{},positionInfoList:[],positionUSDObj:{},apyObj:{}}),getters:{getPoolStore(){return _o()}},actions:{async getAutoPoolList(){const a=await Q("Sui").getAutoPools();console.log(a,"list###");const A=this.getPoolStore,s=a.map(n=>({...A.poolConfigObj[n.pool_id],id:n.id,lp_token_type:n.lp_token_type,autoPoolPositionInfo:n.positins[0],is_pause:n.is_pause,total_supply:n.total_supply,liquidity:n.liquidity,protocol_fee_rate:n.protocol_fee_rate}));this.autoPoolList=s,this.autoPoolObj=Object.fromEntries(s.map((n,d)=>[n.address,n])),this.getMyAutoPoolPosition(),console.log(s,"##autoPoolList")},async getMyAutoPoolPosition(){var d,I,E;const e=Q("Sui"),a=this.autoPoolList,A=no("Sui"),s=[],{RATES:n}=this.getPoolStore;for(let T=0;T<a.length;T++){const i=a[T];console.log(i,"poolINfo###");const y=await A.getPool(i.address),p=await e.getLpBalance(a[T].lp_token_type);console.log(p,"balance##");const O=(await A.getTokenListByCoinType([a[T].lp_token_type]))[0];console.log(O,"lpInfo##");const J=((d=n[i.coinA.address])==null?void 0:d.price)||"",W=((I=n[i.coinB.address])==null?void 0:I.price)||"",o=i.autoPoolPositionInfo.tick_lower_index,_=i.autoPoolPositionInfo.tick_upper_index,P={tick_lower_index:o,tick_upper_index:_,current_sqrt_price:y==null?void 0:y.current_sqrt_price,liquidity:Number(p)>0?X.get_share_liquidity_by_amount({liquidity:i==null?void 0:i.liquidity,total_supply:i==null?void 0:i.total_supply},p):0},b=await A.getCoinAmountFromLiquidity({pool:{...i,current_sqrt_price:y==null?void 0:y.current_sqrt_price},position:P,roundUp:!1});console.log(b,"##amountInfo");const v=b.coinaAmount,g=b.coinbAmount;console.log(i.protocol_fee_rate,"##newPoolInfo.protocol_fee_rate");const q=v,u=g,r=i.coinA.decimals,S=i.coinB.decimals,U=A.TickMath.tickIndexToPrice(Number(o),r,S).toString(),D=A.TickMath.tickIndexToPrice(Number(_),r,S).toString(),k=new t(J).mul(new t(v)).toNumber(),x=new t(W).mul(new t(g)).toNumber(),j=k>0&&k<.01?"<$0.01":`$${z(B(k,2))}`,L=x>0&&x<.01?"<$0.01":`$${z(B(x,2))}`,h=io.sqrtPriceX64ToPrice(y.current_sqrt_price,r,S);let f,w;console.log(i.total_supply,"##poolInfo.total_supply");const $=await A.getCoinAmountFromLiquidity({pool:{...i,tick_lower_index:o,tick_upper_index:_,current_sqrt_price:y==null?void 0:y.current_sqrt_price},position:{...P,liquidity:i.liquidity},roundUp:!1}),c=new t($.coinaAmount).toNumber(),l=new t($.coinbAmount).toNumber();console.log(c,l,h.toString(),"###116");const F=B(new t(c).mul(new t(J)).toNumber(),2),M=B(new t(l).mul(new t(W)).toNumber(),2);if(console.log(y,"newPool##"),c>0&&l>0){const oo=new t(c).mul(h).add(new t(l));f=new t(c).mul(h).div(oo).mul(100).toNumber().toFixed(2),w=new t(l).div(oo).mul(100).toNumber().toFixed(2)}else v>0?(f=100,w=0):g>0?(f=0,w=100):(f=50,w=50);let C=0;Number(p)>0&&(C=new t(p).div(Math.pow(10,O.decimals)));const V=J&&W?B(new t(k).add(new t(x)).toString(),2):"",K=i.total_supply;let N=0;C>0&&K>0&&(N=new t(C).mul(Math.pow(10,O.decimals)).div(new t(K)).mul(100).toNumber()),console.log(N,"##myShare");const Z=new t(1).div(Math.pow(10,i.decimals)).toNumber();let Y=0;N>1?Y=B(N,2):N>0&&N<Z?Y=`<${Z}`:N==0?Y=0:Y=so(N,1),console.log(p,C.toString(),"###balance"),this.positionInfoObj[i.id]={tick_lower_index:o,tick_upper_index:_,current_sqrt_price:y.current_sqrt_price,myLiquidity:H(p,O.decimals),amountA:q,amountB:u,...i,lpInfo:O,myAmountAUSD:j,myAmountBUSD:L,myLiquidityUSD:V,myShare:Y,minPrice:U,maxPrice:D,poolCoinARatio:f,poolCoinBRatio:w,poolCoinANum:c,poolCoinBNum:l,poolCoinAUSD:F,poolCoinBUSD:M},s.push({tick_lower_index:o,tick_upper_index:_,current_sqrt_price:(E=i==null?void 0:i.object)==null?void 0:E.current_sqrt_price,myLiquidity:H(p,O.decimals),amountA:q,amountB:u,...i,lpInfo:O,myAmountAUSD:j,myAmountBUSD:L,myLiquidityUSD:V,myShare:Y,minPrice:U,maxPrice:D,poolCoinARatio:f,poolCoinBRatio:w,poolCoinANum:c,poolCoinBNum:l,poolCoinAUSD:F,poolCoinBUSD:M})}this.positionInfoList=s,console.log(this.positionInfoObj,"this.positionInfoObj###"),console.log(this.positionInfoList,"###this.positionInfoList")},async updatePositionItem(e){var C,V;const a=Q("Sui"),A=no("Sui"),s=await a.getAutoPool(e),n=await A.getPool(s.pool_id);console.log("newPoolInfo:",s),console.log("this.positionInfoObj[id]:",this.positionInfoObj[e]);const d={...this.positionInfoObj[e],autoPoolPositionInfo:s.positins[0]},I=await a.getLpBalance(d.lp_token_type),E=(await A.getTokenListByCoinType([d.lp_token_type]))[0];console.log(I,"###balance updatePositionItem");const T=d.autoPoolPositionInfo.tick_lower_index,i=d.autoPoolPositionInfo.tick_upper_index,y={tick_lower_index:T,tick_upper_index:i,current_sqrt_price:n.current_sqrt_price,liquidity:X.get_share_liquidity_by_amount({liquidity:s==null?void 0:s.liquidity,total_supply:s==null?void 0:s.total_supply},I)},p=A.getCoinAmountFromLiquidity({pool:{current_sqrt_price:n.current_sqrt_price,...d},position:y,roundUp:!1});console.log(p,"amountInfo###");const O=p.coinaAmount,J=p.coinbAmount,W=p.coinaAmount,o=p.coinbAmount,{RATES:_}=this.getPoolStore,P=s.total_supply,b=2,v=2,g=((C=_[d.coinA.address])==null?void 0:C.price)||0,q=((V=_[d.coinB.address])==null?void 0:V.price)||0,u=new t(g).mul(new t(p==null?void 0:p.coinaAmount)).toNumber(),r=new t(q).mul(new t(p==null?void 0:p.coinbAmount)).toNumber(),S=u>0&&u<.01?"<$0.01":`$${z(B(u,2))}`,U=r>0&&r<.01?"<$0.01":`$${z(B(r,2))}`;let D=new t(0);Number(I)>0&&(D=new t(I).div(Math.pow(10,E.decimals)));const k=new t(D).mul(Math.pow(10,d.lpInfo.decimals)).div(new t(P)).mul(100).toNumber();let x=0;const j=new t(1).div(Math.pow(10,d.decimals)).toNumber(),L=g&&q?B(new t(u).add(new t(r)).toString(),2):"";k>1?x=B(k,2):k>0&&k<j?x=`<${j}`:x=so(k,1);let h,f;const w=io.sqrtPriceX64ToPrice(n.current_sqrt_price,b,v),$=await A.getCoinAmountFromLiquidity({pool:{...d,tick_lower_index:T,tick_upper_index:i,current_sqrt_price:n==null?void 0:n.current_sqrt_price},position:{...y,liquidity:s.liquidity},roundUp:!1}),c=new t($.coinaAmount).toNumber(),l=new t($.coinbAmount).toNumber();console.log(c,l,w.toString(),"###116");const F=B(new t(c).mul(new t(g)).toNumber(),2),M=B(new t(l).mul(new t(q)).toNumber(),2);if(console.log(n,"newPool##"),c>0&&l>0){const K=new t(c).mul(w).add(new t(l));h=new t(c).mul(w).div(K).mul(100).toNumber().toFixed(2),f=new t(l).div(K).mul(100).toNumber().toFixed(2)}else O>0?(h=100,f=0):J>0?(h=0,f=100):(h=50,f=50);this.positionInfoObj[e]={...d,tick_lower_index:T,tick_upper_index:i,current_sqrt_price:n.current_sqrt_price,myLiquidity:H(I,E.decimals),amountA:W,amountB:o,myShare:x,myAmountAUSD:S,myAmountBUSD:U,myLiquidityUSD:L,poolCoinARatio:h,poolCoinBRatio:f,poolCoinANum:c,poolCoinBNum:l,poolCoinAUSD:F,poolCoinBUSD:M},console.log(this.positionInfoObj[e],"###this.positionInfoObj[id]")},async getAutoPoolAPY(){try{const{data:e}=await fetch(`${m.Sui.api}/v2/sui/auto_pools`).then(a=>a.json());e&&e.pools&&e.pools.length>0&&(this.apyObj=Object.fromEntries(e.pools.map((a,A)=>[a.object_id,{...a,apr:a.apr.replace("%","")>0&&a.apr.replace("%","")<.01?"<0.01%":B(a.apr.replace("%",""),2)+"%",resultApr:a.apr.replace("%","")}])),console.log(this.apyObj,"data##"))}catch{this.apyObj={}}}}});export{Q as a,fo as u};
