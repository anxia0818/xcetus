import{a6 as lo,l as co,T as uo,a7 as ro}from"./entry.8f9f0ae7.js";import{c as p,a as ao}from"./sha256.e836da78.js";import{I as po,e as M,C as Q,J as E,f as eo,u as _o,b as io,a as H,s as I,T as no,K as so,p as Z}from"./pool.cb9a9b21.js";import{C as mo,V as J}from"./index.54249249.js";import{D as t}from"./decimal.0e8aa3f1.js";function oo(e){const r={launchpad:p[e||"Sui"].launchpad,ido:p[e||"Sui"].ido,xcetus:p[e||"Sui"].xcetus,xcetus_dividends:p[e||"Sui"].xcetus_dividends,cetus_faucet:p[e||"Sui"].cetus_faucet,xtoken:p[e||"Sui"].xtoken,xtoken_dividends:p[e||"Sui"].xtoken_dividends,token_faucet:p[e||"Sui"].token_faucet,booster:p[e||"Sui"].booster,maker_bonus:p[e||"Sui"].maker_bonus,liquidity_stratefy:p[e||"Sui"].liquidity_stratefy,vaults:p[e||"Sui"].vaults},S={fullRpcUrl:localStorage.getItem(`${e}-currentRpclocal2`)||p[e||"Sui"].fullRpcUrl,simulationAccount:p[e||"Sui"].simulationAccount,cetus_config:p[e||"Sui"].cetus_config,clmm_pool:p[e||"Sui"].clmm_pool,integrate:p[e||"Sui"].integrate,deepbook:p[e||"Sui"].deepbook,deepbook_endpoint_v2:p[e||"Sui"].deepbook_endpoint_v2,aggregatorUrl:p[e||"Sui"].aggregatorUrl},l=new po(S),i=lo(new mo(r,l)),m=ao(),O=co(()=>m);uo(()=>{O.value.address&&(l.senderAddress=O.value.address)});const K=async()=>{console.log(i,"sdk###");const o=await i.Vaults.getVaultList();return o&&o.data||[]},C=async o=>await i.Vaults.getVault(o),n=async o=>{if(console.log(o,"###coinType"),l.senderAddress){const c=await i.ClmmSDK.fullClient.getBalance({owner:l.senderAddress,coinType:o});return c&&c.totalBalance}else return 0},d=o=>({transactionBlock:o,options:{showEffects:!0,showEvents:!0,showInput:!0,showRawInput:!0,showObjectChanges:!0,showBalanceChanges:!0}});return{getAutoPools:K,getLpBalance:n,deposit:async o=>{const{lowerTick:c,upperTick:f,slippage:g,rewarder_coin_types:T,isOnlyA:b,isOnlyB:k,currentTickIndex:A}=o;console.log(o,"params###");let _=o.fix_amount_a,u,P,j;if(b||k){const v=await i.Vaults.calculateDepositSwapAmount({lowerTick:c,upperTick:f,curSqrtPrice:o.curSqrtPrice,fix_amount_a:o.fix_amount_a,input_amount:o.coinAmount,coinTypeA:o.coinTypeA,coinTypeB:o.coinTypeB,clmm_pool:o.clmm_pool});v?(u=new M(v.swapOutAmount),P=new M(o.curSqrtPrice),j={swap_amount:v.swapInAmount,a2b:_},_=!_):(P=new M(o.curSqrtPrice),u=new M(o.coinAmount))}else P=o.curSqrtPrice,u=new M(o.coinAmount);let U,h,B;console.log(c,A,f,"####138"),A>=c&&A<=f?(U=Q.estLiquidityAndcoinAmountFromOneAmounts(c,f,u,_,!0,g,P),h=_?u.toString():U.tokenMaxA.toString(),B=_?U.tokenMaxB.toString():u.toString()):A<c?(h=u.toNumber(),B=0):A>f&&(h=0,B=u.toNumber());const R=await i.Vaults.deposit({vault_id:o.id,clmm_pool:o.clmm_pool,lp_token_type:o.lp_token_type,amount_a:h,amount_b:B,fix_amount_a:_,slippage:g,coinTypeA:o.coinTypeA,coinTypeB:o.coinTypeB,rewarder_coin_types:[],swapParams:j});return d(R)},remove:async o=>{const{lowerTick:c,upperTick:f,coinTypeA:g,coinTypeB:T,receiveAmount:b,clmm_pool:k,lowerSqrtPrice:A,upperSqrtPrice:_,fix_amount_a:u,curSqrtPrice:P,slippage:j,rewarder_coin_types:U,id:h,liquidity:B,swapParams:R,isOnlyA:v,isOnlyB:L,sliderVal:y}=o;console.log(y,"sliderVal##");const w=await C(h),x=await l.Pool.getPool(w.pool_id);let a,q,N,$,Y,z,D;console.log(b,"##receiveAmount"),v||L?(a=await i.Vaults.calculateRemoveSwapAmount({lowerTick:c,upperTick:f,curSqrtPrice:x.current_sqrt_price,fix_amount_a:u,receive_amount:b,coinTypeA:g,coinTypeB:T,clmm_pool:k}),console.log(a,"swapResut###"),a&&(q=Q.getCoinAmountFromLiquidity(new M(a.liquidity),new M(x.current_sqrt_price),A,_,!1),N=J.get_protocol_fee_amount(w,q.coinA.toString()),$=J.get_protocol_fee_amount(w,q.coinB.toString()),Y=J.get_lp_amount_by_liquidity(w,a.liquidity),z=E(q.coinA.toString()).mul(E(1-o.slippage)),D=E(q.coinB.toString()).mul(E(1-o.slippage)))):(q=Q.getCoinAmountFromLiquidity(new M(B),P,A,_,!1),N=J.get_protocol_fee_amount(w,q.coinA.toString()),$=J.get_protocol_fee_amount(w,q.coinB.toString()),Y=o.lpTokenAmount,z=E(q.coinA.toString()).mul(E(1-o.slippage)),D=E(q.coinB.toString()).mul(E(1-o.slippage)),console.log(N,$,"##protocol_fee_amount_b"));const G={vault_id:o.id,clmm_pool:o.clmm_pool,lp_token_type:o.lp_token_type,coinTypeA:o.coinTypeA,coinTypeB:o.coinTypeB,lp_token_amount:Y.toString(),min_amount_a:eo(z,0)||"",min_amount_b:eo(D,0)||"",rewarder_coin_types:[]};console.log(G,"##removeParams"),(v||L)&&(G.swapParams={a2b:!u,swap_amount:a==null?void 0:a.swapInAmount});const V=await i.Vaults.remove(G);return d(V)},getAutoPool:C,calculateDepositSwapAmount:async o=>{const{lowerTick:c,upperTick:f,curSqrtPrice:g,fix_amount_a:T,input_amount:b,coinTypeA:k,coinTypeB:A,clmm_pool:_}=o;return console.log(o,"params###"),await i.Vaults.calculateDepositSwapAmount({lowerTick:c,upperTick:f,curSqrtPrice:g,fix_amount_a:T,input_amount:b,coinTypeA:k,coinTypeB:A,clmm_pool:_})},calculateRemoveSwapAmount:async o=>{const{lowerTick:c,upperTick:f,curSqrtPrice:g,fix_amount_a:T,receiveAmount:b,coinTypeA:k,coinTypeB:A,clmm_pool:_}=o;console.log(o,"params###");const u=await i.Vaults.calculateRemoveSwapAmount({lowerTick:c,upperTick:f,curSqrtPrice:g,fix_amount_a:T,receive_amount:b,coinTypeA:k,coinTypeB:A,clmm_pool:_});return console.log(u,"###swapResut"),u}}}const fo=ro("autoPool",{state:()=>({autoPoolList:[],autoPoolObj:{},positionInfoObj:{},positionInfoList:[],positionUSDObj:{},apyObj:{}}),getters:{getPoolStore(){return _o()}},actions:{async getAutoPoolList(){const r=await oo("Sui").getAutoPools();console.log(r,"list###");const S=this.getPoolStore,l=r.map(i=>({...S.poolConfigObj[i.pool_id],id:i.id,lp_token_type:i.lp_token_type,autoPoolPositionInfo:i.positins[0],is_pause:i.is_pause,total_supply:i.total_supply,liquidity:i.liquidity,protocol_fee_rate:i.protocol_fee_rate}));this.autoPoolList=l,this.autoPoolObj=Object.fromEntries(l.map((i,m)=>[i.address,i])),this.getMyAutoPoolPosition(),console.log(l,"##autoPoolList")},async getMyAutoPoolPosition(){var m,O,K;const e=oo("Sui"),r=this.autoPoolList,S=io("Sui"),l=[],{RATES:i}=this.getPoolStore;for(let C=0;C<r.length;C++){const n=r[C];console.log(n,"poolINfo###");const d=await S.getPool(n.address),s=await e.getLpBalance(r[C].lp_token_type);console.log(s,"balance##");const F=(await S.getTokenListByCoinType([r[C].lp_token_type]))[0];console.log(F,"lpInfo##");const W=((m=i[n.coinA.address])==null?void 0:m.price)||"",X=((O=i[n.coinB.address])==null?void 0:O.price)||"",o=n.autoPoolPositionInfo.tick_lower_index,c=n.autoPoolPositionInfo.tick_upper_index,f={tick_lower_index:o,tick_upper_index:c,current_sqrt_price:d==null?void 0:d.current_sqrt_price,liquidity:Number(s)>0?J.get_share_liquidity_by_amount({liquidity:n==null?void 0:n.liquidity,total_supply:n==null?void 0:n.total_supply},s):0},g=await S.getCoinAmountFromLiquidity({pool:{...n,current_sqrt_price:d==null?void 0:d.current_sqrt_price},position:f,roundUp:!1});console.log(g,"##amountInfo");const T=g.coinaAmount,b=g.coinbAmount;console.log(n.protocol_fee_rate,"##newPoolInfo.protocol_fee_rate");const k=T,A=b,_=n.coinA.decimals,u=n.coinB.decimals,P=S.TickMath.tickIndexToPrice(Number(o),_,u).toString(),j=S.TickMath.tickIndexToPrice(Number(c),_,u).toString(),U=new t(W).mul(new t(T)).toNumber(),h=new t(X).mul(new t(b)).toNumber(),B=U>0&&U<.01?"<$0.01":`$${H(I(U,2))}`,R=h>0&&h<.01?"<$0.01":`$${H(I(h,2))}`,v=no.sqrtPriceX64ToPrice(d.current_sqrt_price,_,u);let L,y;console.log(n.total_supply,"##poolInfo.total_supply");const w=await S.getCoinAmountFromLiquidity({pool:{...n,tick_lower_index:o,tick_upper_index:c,current_sqrt_price:d==null?void 0:d.current_sqrt_price},position:{...f,liquidity:n.liquidity},roundUp:!1}),x=new t(w.coinaAmount).toNumber(),a=new t(w.coinbAmount).toNumber();console.log(x,a,v.toString(),"###116");const q=I(new t(x).mul(new t(W)).toNumber(),2),N=I(new t(a).mul(new t(X)).toNumber(),2);if(console.log(d,"newPool##"),console.log(x,a,"###131"),x>0&&a>0){const to=new t(x).mul(v).add(new t(a));L=new t(x).mul(v).div(to).mul(100).toNumber().toFixed(2),y=new t(a).div(to).mul(100).toNumber().toFixed(2)}else x>0?(L=100,y=0):a>0?(L=0,y=100):(L=50,y=50);console.log(x,a,L,y,"###147");let $=0;Number(s)>0&&($=new t(s).div(Math.pow(10,F.decimals)));const Y=W&&X?I(new t(U).add(new t(h)).toString(),2):"",z=n.total_supply;let D=0;$>0&&z>0&&(D=new t($).mul(Math.pow(10,F.decimals)).div(new t(z)).mul(100).toNumber()),console.log(D,"##myShare");const G=new t(1).div(Math.pow(10,n.decimals)).toNumber();let V=0;D>1?V=I(D,2):D>0&&D<G?V=`<${G}`:D==0?V=0:V=so(D,1),console.log(s,$.toString(),"###balance"),this.positionInfoObj[n.id]={tick_lower_index:o,tick_upper_index:c,current_sqrt_price:d.current_sqrt_price,myLiquidity:Z(s,F.decimals),amountA:k,amountB:A,...n,lpInfo:F,myAmountAUSD:B,myAmountBUSD:R,myLiquidityUSD:Y,myShare:V,minPrice:P,maxPrice:j,poolCoinARatio:L,poolCoinBRatio:y,poolCoinANum:x,poolCoinBNum:a,poolCoinAUSD:q,poolCoinBUSD:N},l.push({tick_lower_index:o,tick_upper_index:c,current_sqrt_price:(K=n==null?void 0:n.object)==null?void 0:K.current_sqrt_price,myLiquidity:Z(s,F.decimals),amountA:k,amountB:A,...n,lpInfo:F,myAmountAUSD:B,myAmountBUSD:R,myLiquidityUSD:Y,myShare:V,minPrice:P,maxPrice:j,poolCoinARatio:L,poolCoinBRatio:y,poolCoinANum:x,poolCoinBNum:a,poolCoinAUSD:q,poolCoinBUSD:N})}this.positionInfoList=l,console.log(this.positionInfoObj,"this.positionInfoObj###"),console.log(this.positionInfoList,"###this.positionInfoList")},async updatePositionItem(e){var q,N;const r=oo("Sui"),S=io("Sui"),l=await r.getAutoPool(e),i=await S.getPool(l.pool_id);console.log("newPoolInfo:",l),console.log("this.positionInfoObj[id]:",this.positionInfoObj[e]);const m={...this.positionInfoObj[e],autoPoolPositionInfo:l.positins[0]},O=await r.getLpBalance(m.lp_token_type),K=(await S.getTokenListByCoinType([m.lp_token_type]))[0];console.log(O,"###balance updatePositionItem");const C=m.autoPoolPositionInfo.tick_lower_index,n=m.autoPoolPositionInfo.tick_upper_index,d={tick_lower_index:C,tick_upper_index:n,current_sqrt_price:i.current_sqrt_price,liquidity:J.get_share_liquidity_by_amount({liquidity:l==null?void 0:l.liquidity,total_supply:l==null?void 0:l.total_supply},O)},s=S.getCoinAmountFromLiquidity({pool:{current_sqrt_price:i.current_sqrt_price,...m},position:d,roundUp:!1});console.log(s,"amountInfo###"),s.coinaAmount,s.coinbAmount;const F=s.coinaAmount,W=s.coinbAmount,{RATES:X}=this.getPoolStore,o=l.total_supply,c=2,f=2,g=((q=X[m.coinA.address])==null?void 0:q.price)||0,T=((N=X[m.coinB.address])==null?void 0:N.price)||0,b=new t(g).mul(new t(s==null?void 0:s.coinaAmount)).toNumber(),k=new t(T).mul(new t(s==null?void 0:s.coinbAmount)).toNumber(),A=b>0&&b<.01?"<$0.01":`$${H(I(b,2))}`,_=k>0&&k<.01?"<$0.01":`$${H(I(k,2))}`;let u=new t(0);Number(O)>0&&(u=new t(O).div(Math.pow(10,K.decimals)));const P=new t(u).mul(Math.pow(10,m.lpInfo.decimals)).div(new t(o)).mul(100).toNumber();let j=0;const U=new t(1).div(Math.pow(10,m.decimals)).toNumber(),h=g&&T?I(new t(b).add(new t(k)).toString(),2):"";console.log(g,T,s==null?void 0:s.coinaAmount,s==null?void 0:s.coinbAmount,"myLiquidityUSD###"),P>1?j=I(P,2):P>0&&P<U?j=`<${U}`:j=so(P,1);let B,R;const v=no.sqrtPriceX64ToPrice(i.current_sqrt_price,c,f),L=await S.getCoinAmountFromLiquidity({pool:{...m,tick_lower_index:C,tick_upper_index:n,current_sqrt_price:i==null?void 0:i.current_sqrt_price},position:{...d,liquidity:l.liquidity},roundUp:!1}),y=new t(L.coinaAmount).toNumber(),w=new t(L.coinbAmount).toNumber();console.log(y,w,v.toString(),"###116");const x=I(new t(y).mul(new t(g)).toNumber(),2),a=I(new t(w).mul(new t(T)).toNumber(),2);if(console.log(i,"newPool##"),console.log(y,w,"###poolCoinBNum"),y>0&&w>0){const $=new t(y).mul(v).add(new t(w));B=new t(y).mul(v).div($).mul(100).toNumber().toFixed(2),R=new t(w).div($).mul(100).toNumber().toFixed(2)}else y>0?(B=100,R=0):w>0?(B=0,R=100):(B=50,R=50);this.positionInfoObj[e]={...m,tick_lower_index:C,tick_upper_index:n,current_sqrt_price:i.current_sqrt_price,myLiquidity:Z(O,K.decimals),amountA:F,amountB:W,myShare:j,myAmountAUSD:A,myAmountBUSD:_,myLiquidityUSD:h,poolCoinARatio:B,poolCoinBRatio:R,poolCoinANum:y,poolCoinBNum:w,poolCoinAUSD:x,poolCoinBUSD:a},console.log(this.positionInfoObj[e],"###this.positionInfoObj[id]")},async getAutoPoolAPY(){try{const{data:e}=await fetch(`${p.Sui.api}/v2/sui/auto_pools`).then(r=>r.json());e&&e.pools&&e.pools.length>0&&(this.apyObj=Object.fromEntries(e.pools.map((r,S)=>[r.object_id,{...r,apr:r.apr.replace("%","")>0&&r.apr.replace("%","")<.01?"<0.01%":I(r.apr.replace("%",""),2)+"%",resultApr:r.apr.replace("%","")}])),console.log(this.apyObj,"data##"))}catch{this.apyObj={}}}}});export{oo as a,fo as u};
