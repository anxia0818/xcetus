import{a6 as so,l as co,T as lo,a7 as uo}from"./entry.8278fad2.js";import{c as r,a as ro}from"./sha256.e5b91111.js";import{I as ao,e as L,C as G,l as to,J as eo,u as po,b as no,a as z,s as O,T as _o,K as io,p as H}from"./pool.6412dc9f.js";import{C as mo,V as F}from"./index.99bd5734.js";import{D as n}from"./decimal.0e8aa3f1.js";function Q(t){const l={launchpad:r[t||"Sui"].launchpad,ido:r[t||"Sui"].ido,xcetus:r[t||"Sui"].xcetus,xcetus_dividends:r[t||"Sui"].xcetus_dividends,cetus_faucet:r[t||"Sui"].cetus_faucet,xtoken:r[t||"Sui"].xtoken,xtoken_dividends:r[t||"Sui"].xtoken_dividends,token_faucet:r[t||"Sui"].token_faucet,booster:r[t||"Sui"].booster,maker_bonus:r[t||"Sui"].maker_bonus,liquidity_stratefy:r[t||"Sui"].liquidity_stratefy,vaults:r[t||"Sui"].vaults},A={fullRpcUrl:localStorage.getItem(`${t}-currentRpclocal2`)||r[t||"Sui"].fullRpcUrl,simulationAccount:r[t||"Sui"].simulationAccount,cetus_config:r[t||"Sui"].cetus_config,clmm_pool:r[t||"Sui"].clmm_pool,integrate:r[t||"Sui"].integrate,deepbook:r[t||"Sui"].deepbook,deepbook_endpoint_v2:r[t||"Sui"].deepbook_endpoint_v2,aggregatorUrl:r[t||"Sui"].aggregatorUrl},c=new ao(A),i=so(new mo(l,c)),m=ro(),q=co(()=>m);lo(()=>{q.value.address&&(c.senderAddress=q.value.address)});const M=async()=>{console.log(i,"sdk###");const o=await i.Vaults.getVaultList();return o&&o.data||[]},j=async o=>await i.Vaults.getVault(o),B=async o=>{if(console.log(o,"###coinType"),c.senderAddress){const a=await i.ClmmSDK.fullClient.getBalance({owner:c.senderAddress,coinType:o});return a&&a.totalBalance}else return 0},e=o=>({transactionBlock:o,options:{showEffects:!0,showEvents:!0,showInput:!0,showRawInput:!0,showObjectChanges:!0,showBalanceChanges:!0}});return{getAutoPools:M,getLpBalance:B,deposit:async o=>{const{lowerTick:a,upperTick:d,slippage:g,rewarder_coin_types:S,isOnlyA:f,isOnlyB:b}=o;console.log(o,"params###");let p=o.fix_amount_a,u,_,k;if(f||b){const v=await i.Vaults.calculateDepositSwapAmount({lowerTick:a,upperTick:d,curSqrtPrice:o.curSqrtPrice,fix_amount_a:o.fix_amount_a,input_amount:o.coinAmount,coinTypeA:o.coinTypeA,coinTypeB:o.coinTypeB,clmm_pool:o.clmm_pool});console.log("swapResut: ",v),v?(_=new L(v.afterSqrtPrice),u=new L(v.swapOutAmount),_=new L(o.curSqrtPrice),k={swap_amount:v.swapInAmount,a2b:p},p=!p):(_=new L(o.curSqrtPrice),u=new L(o.coinAmount))}else _=o.curSqrtPrice,u=new L(o.coinAmount);const D=G.estLiquidityAndcoinAmountFromOneAmounts(a,d,u,p,!0,g,_),U=p?u.toString():D.tokenMaxA.toString(),h=p?D.tokenMaxB.toString():u.toString(),C=await i.Vaults.deposit({vault_id:o.id,clmm_pool:o.clmm_pool,lp_token_type:o.lp_token_type,amount_a:U,amount_b:h,fix_amount_a:p,slippage:g,coinTypeA:o.coinTypeA,coinTypeB:o.coinTypeB,rewarder_coin_types:[],swapParams:k});return e(C)},remove:async o=>{const{lowerTick:a,upperTick:d,coinTypeA:g,coinTypeB:S,receiveAmount:f,clmm_pool:b,lowerSqrtPrice:p,upperSqrtPrice:u,fix_amount_a:_,curSqrtPrice:k,slippage:D,rewarder_coin_types:U,id:h,liquidity:C,swapParams:v,isOnlyA:W,isOnlyB:E}=o,P=await j(h),I=await c.Pool.getPool(P.pool_id);let y,w,K,N,R;console.log(f,"##receiveAmount"),W||E?(y=await i.Vaults.calculateRemoveSwapAmount({lowerTick:a,upperTick:d,curSqrtPrice:I.current_sqrt_price,fix_amount_a:_,receive_amount:f,coinTypeA:g,coinTypeB:S,clmm_pool:b}),console.log(y,"swapResut###"),y&&(w=G.getCoinAmountFromLiquidity(new L(y.liquidity),new L(I.current_sqrt_price),p,u,!1),K=F.get_protocol_fee_amount(P,w.coinA.toString()),N=F.get_protocol_fee_amount(P,w.coinB.toString()),R=F.get_lp_amount_by_liquidity(P,y.liquidity))):(w=G.getCoinAmountFromLiquidity(new L(C),k,p,u,!1),K=F.get_protocol_fee_amount(P,w.coinA.toString()),N=F.get_protocol_fee_amount(P,w.coinB.toString()),R=o.lpTokenAmount);const X={vault_id:o.id,clmm_pool:o.clmm_pool,lp_token_type:o.lp_token_type,coinTypeA:o.coinTypeA,coinTypeB:o.coinTypeB,lp_token_amount:R.toString(),min_amount_a:to(eo(w.coinA.toString()).sub(K).toString(),0)||"",min_amount_b:to(eo(w.coinB.toString()).sub(N).toString(),0)||"",rewarder_coin_types:[]};(W||E)&&(X.swapParams={a2b:!_,swap_amount:y==null?void 0:y.swapInAmount});const Y=await i.Vaults.remove(X);return e(Y)},getAutoPool:j,calculateDepositSwapAmount:async o=>{const{lowerTick:a,upperTick:d,curSqrtPrice:g,fix_amount_a:S,input_amount:f,coinTypeA:b,coinTypeB:p,clmm_pool:u}=o;return console.log(o,"params###"),await i.Vaults.calculateDepositSwapAmount({lowerTick:a,upperTick:d,curSqrtPrice:g,fix_amount_a:S,input_amount:f,coinTypeA:b,coinTypeB:p,clmm_pool:u})},calculateRemoveSwapAmount:async o=>{const{lowerTick:a,upperTick:d,curSqrtPrice:g,fix_amount_a:S,receiveAmount:f,coinTypeA:b,coinTypeB:p,clmm_pool:u}=o;return console.log(o,"params###"),await i.Vaults.calculateRemoveSwapAmount({lowerTick:a,upperTick:d,curSqrtPrice:g,fix_amount_a:S,receive_amount:f,coinTypeA:b,coinTypeB:p,clmm_pool:u})}}}const fo=uo("autoPool",{state:()=>({autoPoolList:[],autoPoolObj:{},positionInfoObj:{},positionInfoList:[],positionUSDObj:{},apyObj:{}}),getters:{getPoolStore(){return po()}},actions:{async getAutoPoolList(){const l=await Q("Sui").getAutoPools();console.log(l,"list###");const A=this.getPoolStore,c=l.map(i=>({...A.poolConfigObj[i.pool_id],id:i.id,lp_token_type:i.lp_token_type,autoPoolPositionInfo:i.positins[0],is_pause:i.is_pause,total_supply:i.total_supply,liquidity:i.liquidity,protocol_fee_rate:i.protocol_fee_rate}));this.autoPoolList=c,this.autoPoolObj=Object.fromEntries(c.map((i,m)=>[i.address,i])),this.getMyAutoPoolPosition(),console.log(c,"##autoPoolList")},async getMyAutoPoolPosition(){var m,q,M,j;const t=Q("Sui"),l=this.autoPoolList,A=no("Sui"),c=[],{RATES:i}=this.getPoolStore;for(let B=0;B<l.length;B++){const e=l[B];console.log(e,"poolINfo###");const s=await A.getPool(e.address),T=await t.getLpBalance(l[B].lp_token_type);console.log(T,"balance##");const x=(await A.getTokenListByCoinType([l[B].lp_token_type]))[0];console.log(x,"lpInfo##");const V=((m=i[e.coinA.address])==null?void 0:m.price)||"",o=((q=i[e.coinB.address])==null?void 0:q.price)||"",a=e.autoPoolPositionInfo.tick_lower_index,d=e.autoPoolPositionInfo.tick_upper_index;console.log(l[B],"list[i]"),console.log((M=e==null?void 0:e.object)==null?void 0:M.current_sqrt_price,"##poolInfo?.object?.current_sqrt_price");const g={tick_lower_index:a,tick_upper_index:d,current_sqrt_price:s==null?void 0:s.current_sqrt_price,liquidity:Number(T)>0?F.get_share_liquidity_by_amount({liquidity:e==null?void 0:e.liquidity,total_supply:e==null?void 0:e.total_supply},T):0};console.log(e,"##position");const S=await A.getCoinAmountFromLiquidity({pool:{...e,current_sqrt_price:s==null?void 0:s.current_sqrt_price},position:g,roundUp:!1});console.log(S,"##amountInfo");const f=S.coinaAmount,b=S.coinbAmount;console.log(e.protocol_fee_rate,"##newPoolInfo.protocol_fee_rate");const p=f,u=b,_=e.coinA.decimals,k=e.coinB.decimals,D=A.TickMath.tickIndexToPrice(Number(a),_,k).toString(),U=A.TickMath.tickIndexToPrice(Number(d),_,k).toString(),h=new n(V).mul(new n(f)).toNumber(),C=new n(o).mul(new n(b)).toNumber(),v=h>0&&h<.01?"<$0.01":`$${z(O(h,2))}`,W=C>0&&C<.01?"<$0.01":`$${z(O(C,2))}`,E=_o.sqrtPriceX64ToPrice(s.current_sqrt_price,_,k);let P,I;const y=new n(s.coinAmountA).div(new n(Math.pow(10,_))).toNumber(),w=new n(s.coinAmountB).div(new n(Math.pow(10,k))).toNumber();console.log(y,w,E.toString(),"###116");const K=new n(y).mul(new n(V)).toNumber(),N=new n(w).mul(new n(o)).toNumber();if(console.log(s,"newPool##"),y>0&&w>0){const oo=new n(y).mul(E).add(new n(w));P=new n(y).mul(E).div(oo).mul(100).toNumber().toFixed(2),I=new n(w).div(oo).mul(100).toNumber().toFixed(2)}else f>0?(P=100,I=0):b>0?(P=0,I=100):(P=50,I=50);let R=0;Number(T)>0&&(R=new n(T).div(Math.pow(10,x.decimals)));const X=V&&o?O(new n(h).add(new n(C)).toString(),2):"",Y=e.total_supply;let $=0;R>0&&Y>0&&($=new n(R).mul(Math.pow(10,x.decimals)).div(new n(Y)).mul(100).toNumber()),console.log($,"##myShare");const Z=new n(1).div(Math.pow(10,e.decimals)).toNumber();let J=0;$>1?J=O($,2):$>0&&$<Z?J=`<${Z}`:$==0?J=0:J=io($,1),console.log(T,R.toString(),"###balance"),this.positionInfoObj[e.id]={tick_lower_index:a,tick_upper_index:d,current_sqrt_price:s.current_sqrt_price,myLiquidity:H(T,x.decimals),amountA:p,amountB:u,...e,lpInfo:x,myAmountAUSD:v,myAmountBUSD:W,myLiquidityUSD:X,myShare:J,minPrice:D,maxPrice:U,poolCoinARatio:P,poolCoinBRatio:I,poolCoinANum:y,poolCoinBNum:w,poolCoinAUSD:K,poolCoinBUSD:N},c.push({tick_lower_index:a,tick_upper_index:d,current_sqrt_price:(j=e==null?void 0:e.object)==null?void 0:j.current_sqrt_price,myLiquidity:H(T,x.decimals),amountA:p,amountB:u,...e,lpInfo:x,myAmountAUSD:v,myAmountBUSD:W,myLiquidityUSD:X,myShare:J,minPrice:D,maxPrice:U,poolCoinARatio:P,poolCoinBRatio:I,poolCoinANum:y,poolCoinBNum:w,poolCoinAUSD:K,poolCoinBUSD:N})}this.positionInfoList=c,console.log(this.positionInfoObj,"this.positionInfoObj###"),console.log(this.positionInfoList,"###this.positionInfoList")},async updatePositionItem(t){var U,h;const l=Q("Sui"),A=no("Sui"),c=await l.getAutoPool(t),i=await A.getPool(c.pool_id);console.log("newPoolInfo:",c),console.log("this.positionInfoObj[id]:",this.positionInfoObj[t]);const m={...this.positionInfoObj[t],autoPoolPositionInfo:c.positins[0]},q=await l.getLpBalance(m.lp_token_type),M=(await A.getTokenListByCoinType([m.lp_token_type]))[0];console.log(q,"###balance updatePositionItem");const j=m.autoPoolPositionInfo.tick_lower_index,B=m.autoPoolPositionInfo.tick_upper_index,e={tick_lower_index:j,tick_upper_index:B,current_sqrt_price:i.current_sqrt_price,liquidity:F.get_share_liquidity_by_amount({liquidity:c==null?void 0:c.liquidity,total_supply:c==null?void 0:c.total_supply},q)},s=A.getCoinAmountFromLiquidity({pool:{current_sqrt_price:i.current_sqrt_price,...m},position:e,roundUp:!1});console.log(s,"amountInfo###"),s.coinaAmount,s.coinbAmount;const T=s.coinaAmount,x=s.coinbAmount,{RATES:V}=this.getPoolStore,o=c.total_supply,a=((U=V[m.coinA.address])==null?void 0:U.price)||0,d=((h=V[m.coinB.address])==null?void 0:h.price)||0,g=new n(a).mul(new n(s==null?void 0:s.coinaAmount)).toNumber(),S=new n(d).mul(new n(s==null?void 0:s.coinbAmount)).toNumber(),f=g>0&&g<.01?"<$0.01":`$${z(O(g,2))}`,b=S>0&&S<.01?"<$0.01":`$${z(O(S,2))}`;let p=new n(0);Number(q)>0&&(p=new n(q).div(Math.pow(10,M.decimals)));const u=new n(p).mul(Math.pow(10,m.lpInfo.decimals)).div(new n(o)).mul(100).toNumber();let _=0;const k=new n(1).div(Math.pow(10,m.decimals)).toNumber(),D=a&&d?O(new n(g).add(new n(S)).toString(),2):"";u>1?_=O(u,2):u>0&&u<k?_=`<${k}`:_=io(u,1),this.positionInfoObj[t]={...m,tick_lower_index:j,tick_upper_index:B,current_sqrt_price:i.current_sqrt_price,myLiquidity:H(q,M.decimals),amountA:T,amountB:x,myShare:_,myAmountAUSD:f,myAmountBUSD:b,myLiquidityUSD:D},console.log(this.positionInfoObj[t],"###this.positionInfoObj[id]")},async getAutoPoolAPY(){try{const{data:t}=await fetch(`${r.Sui.api}/v2/sui/auto_pools`).then(l=>l.json());t&&t.pools&&t.pools.length>0&&(this.apyObj=Object.fromEntries(t.pools.map((l,A)=>[l.object_id,{...l,apr:l.apr.replace("%","")>0&&l.apr.replace("%","")<.01?"<0.01%":O(l.apr.replace("%",""),2)+"%",resultApr:l.apr.replace("%","")}])),console.log(this.apyObj,"data##"))}catch{this.apyObj={}}}}});export{Q as a,fo as u};
