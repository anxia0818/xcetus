import{c as f,p as d,a as p,D as g,s as w}from"./pool.712b0c3f.js";import{u as r}from"./useWhale.7829f12d.js";import{a1 as v}from"./entry.b015e618.js";import{c as C}from"./sha256.96dccb3d.js";const x=v("xcetus",{state:()=>({venft_id:"",xWhaleBalance:"--",venftInfo:{},pendingAmount:"--",newPendingAmount:"--",whaleBalance:"--",ownerLocks:[],availableXwhale:"--",redeemingXwhale:"--",nextStartTime:"",xcetusShare:"--",pendingCoinInfo:{},newPendingCoinInfo:{},cetusApr:"",claimLoading:"",dividendManagerInfo:{}}),actions:{async getOwnerVeNFT(t){const n=r("Sui");try{const e=await n.getOwnerVeNFT(t);console.log(e,"===>result"),e&&!f(e)?(this.venft_id=e.id,this.xWhaleBalance=d(e.xcetus_balance,9),this.venftInfo={id:e.id,type:e.type,index:e.index,xcetus_balance:e.xcetus_balance},console.log("执行37"),this.getVeNFTDividendInfo()):(this.xWhaleBalance="0",this.availableXwhale="0",this.redeemingXwhale="0",this.pendingAmount="0",this.newPendingAmount="0")}catch{this.xWhaleBalance="0",this.availableXwhale="0",this.redeemingXwhale="0",this.pendingAmount="0",this.newPendingAmount="0"}},async getVeNFTDividendInfo(){const t=r("Sui"),n=p("Sui");try{const e=await t.getVeNFTDividendInfo(this.venft_id,this.dividendManagerInfo),o=await t.getPeriod(this.dividendManagerInfo),h=await n.getTokenList();console.log(o,"===>period"),console.log(JSON.stringify(e),"===>result");const l=[];if(e&&e.rewards){for(let i=0;i<e.rewards.length;i++)if(e.rewards[i].period<o){const a=e.rewards[i].rewards;for(let c=0;c<a.length;c++){const s=a[c];l.push({...s})}}if(l&&l.length>0){const i={};for(let c=0;c<l.length;c++){const s=l[c];if(i[s.coin_type])i[s.coin_type].amount=new g(i[s.coin_type].amount).add(new g(s.amount)).toString();else{let u=h.filter(m=>m.address==s.coin_type)[0];u||(u=(await n.getTokenListByCoinType([s.coin_type]))[0]),i[s.coin_type]={...s,...u}}}const a=Object.values(i);console.log(a,"===>rewardArr"),this.pendingCoinInfo=a[0],this.pendingAmount=w(d(a[0].amount,a[0].decimals),6),this.newPendingCoinInfo=a&&a.length>1?a[1]:{},this.newPendingAmount=a&&a.length>1?w(d(a[1].amount,a[1].decimals),6):0}}else this.pendingAmount="0",this.newPendingAmount="0"}catch{this.pendingAmount="0",this.newPendingAmount="0"}},async getDividendManager(){const n=await r("Sui").getDividendManager();this.nextStartTime=n.nextStartTime,this.dividendManagerInfo=n,this.getVeNFTDividendInfo()},async getAccountWhaleBalance(t){const e=await r("Sui").getOwnerCetusCoins(t);if(console.log(e,"==>assets"),e&&e.length>0){let o=new g(0);e.forEach(h=>{console.log(d(h.balance.toString(),9),"===>prettyAmount(ele.balance.toString(), 9)"),o=o.add(d(h.balance.toString(),9))}),console.log(this.whaleBalance,"===>this.whaleBalance"),this.whaleBalance=o}else this.whaleBalance="0"},async getOwnerLockCetuss(t){const e=await r("Sui").getOwnerLockCetuss(t);console.log(e,"assets===>");const o=e.sort((h,l)=>h.locked_until_time-l.locked_until_time);this.ownerLocks=o,console.log(this.ownerLocks,"===>this.ownerLocks"),this.setClaimLoading(""),this.getAvailableXCetus()},async getAvailableXCetus(){const n=await r("Sui").getAvailableXCetus(this.venftInfo,this.ownerLocks);console.log(n,"==>result1111"),this.availableXwhale=d(n,9),console.log(this.xWhaleBalance,"===>this.xWhaleBalance"),console.log(this.availableXwhale,"===>this.availableXwhale"),this.redeemingXwhale=this.xWhaleBalance!=="--"?new g(this.xWhaleBalance).sub(new g(this.availableXwhale)).toString():"--"},async getMyShare(t){const e=await r("Sui").getMyShare(t);this.xcetusShare=Number(e)>0&&Number(e)<.01?"<0.01":e,console.log(e,"result===>124")},async getXcetusApr(){const{data:t}=await fetch(`${C.Sui.api}/v2/sui/storm/dividend_rewards`).then(e=>e.json()),n=t.apr&&t.apr.replace("%","");this.cetusApr=Number(n)>0&&Number(n)<.01?"<0.01":n,console.log(t,"data===>")},loginOut(){this.venft_id="",this.xWhaleBalance="--",this.venftInfo={},this.pendingAmount="--",this.whaleBalance="--",this.ownerLocks=[],this.availableXwhale="--",this.redeemingXwhale="--",this.xcetusShare="--"},setClaimLoading(t){this.claimLoading=t}}});export{x as u};
