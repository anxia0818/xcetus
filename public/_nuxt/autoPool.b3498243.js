import{a6 as G,l as H,T as Q,a7 as X}from"./entry.816bc495.js";import{c as i,a as Z}from"./sha256.a25ebc00.js";import{I as N,C as J,J as I,l as W,u as oo,b as Y,a as D,s as x,f as z,p as $}from"./pool.16052191.js";import{C as to,V as C}from"./index.88b99e34.js";import{D as s}from"./decimal.0e8aa3f1.js";function M(e){const u={launchpad:i[e||"Sui"].launchpad,ido:i[e||"Sui"].ido,xcetus:i[e||"Sui"].xcetus,xcetus_dividends:i[e||"Sui"].xcetus_dividends,cetus_faucet:i[e||"Sui"].cetus_faucet,xtoken:i[e||"Sui"].xtoken,xtoken_dividends:i[e||"Sui"].xtoken_dividends,token_faucet:i[e||"Sui"].token_faucet,booster:i[e||"Sui"].booster,maker_bonus:i[e||"Sui"].maker_bonus,liquidity_stratefy:i[e||"Sui"].liquidity_stratefy,vaults:i[e||"Sui"].vaults},f={fullRpcUrl:localStorage.getItem(`${e}-currentRpclocal2`)||i[e||"Sui"].fullRpcUrl,simulationAccount:i[e||"Sui"].simulationAccount,cetus_config:i[e||"Sui"].cetus_config,clmm_pool:i[e||"Sui"].clmm_pool,integrate:i[e||"Sui"].integrate,deepbook:i[e||"Sui"].deepbook,deepbook_endpoint_v2:i[e||"Sui"].deepbook_endpoint_v2,aggregatorUrl:i[e||"Sui"].aggregatorUrl},n=new N(f),t=G(new to(u,n)),m=Z(),b=H(()=>m);Q(()=>{b.value.address&&(n.senderAddress=b.value.address)});const h=async()=>{console.log(t,"sdk###");const o=await t.Vaults.getVaultList();return o&&o.data||[]},k=async o=>await t.Vaults.getVault(o),L=async o=>{if(console.log(o,"###coinType"),n.senderAddress){const c=await t.ClmmSDK.fullClient.getBalance({owner:n.senderAddress,coinType:o});return c&&c.totalBalance}else return 0},l=o=>({transactionBlock:o,options:{showEffects:!0,showEvents:!0,showInput:!0,showRawInput:!0,showObjectChanges:!0,showBalanceChanges:!0}});return{getAutoPools:h,getLpBalance:L,deposit:async o=>{const{lowerTick:c,upperTick:a,coinAmount:y,fix_amount_a:p,slippage:_,curSqrtPrice:P,rewarder_coin_types:v}=o;console.log(o,"params###");const r=J.estLiquidityAndcoinAmountFromOneAmounts(c,a,y,p,!0,_,P),d=p?y.toString():r.tokenMaxA.toString(),g=p?r.tokenMaxB.toString():y.toString(),S=await t.Vaults.deposit({vault_id:o.id,clmm_pool:o.clmm_pool,lp_token_type:o.lp_token_type,amount_a:d,amount_b:g,fix_amount_a:p,slippage:_,coinTypeA:o.coinTypeA,coinTypeB:o.coinTypeB,rewarder_coin_types:[]});return l(S)},remove:async o=>{const{lowerSqrtPrice:c,upperSqrtPrice:a,lpTokenAmount:y,curSqrtPrice:p,slippage:_,rewarder_coin_types:P,id:v}=o;console.log(o.lpTokenAmount.toString(),"params##");const r=J.getCoinAmountFromLiquidity(y,p,c,a,!1),d=I(r.coinA.toString()).mul(I(1-_)),g=I(r.coinB.toString()).mul(I(1-_));console.log(r.coinA.toString(),"##.toString()"),console.log(o.lpTokenAmount.toString(),d.toString(),g.toString(),"params##");const S=await k(v),q=C.get_protocol_fee_amount(S,r.coinA.toString()),A=C.get_protocol_fee_amount(S,r.coinB.toString());console.log(S,"##vault"),console.log(d.toString(),g.toString(),A,q,"###protocol_fee_amount_a"),console.log();const j=await t.Vaults.remove({vault_id:o.id,clmm_pool:o.clmm_pool,lp_token_type:o.lp_token_type,coinTypeA:o.coinTypeA,coinTypeB:o.coinTypeB,lp_token_amount:y.toString(),min_amount_a:W(I(r.coinA.toString()).sub(q).toString(),0)||"",min_amount_b:W(I(r.coinB.toString()).sub(A).toString(),0)||"",rewarder_coin_types:[]});return l(j)},getAutoPool:k}}const lo=X("autoPool",{state:()=>({autoPoolList:[],autoPoolObj:{},positionInfoObj:{},positionInfoList:[],positionUSDObj:{},apyObj:{}}),getters:{getPoolStore(){return oo()}},actions:{async getAutoPoolList(){const u=await M("Sui").getAutoPools();console.log(u,"list###");const f=this.getPoolStore,n=u.map(t=>({...f.poolConfigObj[t.pool_id],id:t.id,lp_token_type:t.lp_token_type,autoPoolPositionInfo:t.positins[0],is_pause:t.is_pause,total_supply:t.total_supply,liquidity:t.liquidity,protocol_fee_rate:t.protocol_fee_rate}));this.autoPoolList=n,this.autoPoolObj=Object.fromEntries(n.map((t,m)=>[t.address,t])),this.getMyAutoPoolPosition(),console.log(n,"##autoPoolList")},async getMyAutoPoolPosition(){var m,b,h,k,L,l,T;const e=M("Sui"),u=this.autoPoolList,f=Y("Sui"),n=[],{RATES:t}=this.getPoolStore;for(let w=0;w<u.length;w++){const o=u[w];console.log(o,"poolINfo###");const c=await e.getLpBalance(u[w].lp_token_type);console.log(c,"balance##");const a=(await f.getTokenListByCoinType([u[w].lp_token_type]))[0];console.log(a,"lpInfo##");const y=((m=t[o.coinA.address])==null?void 0:m.price)||"",p=((b=t[o.coinB.address])==null?void 0:b.price)||"",_=o.autoPoolPositionInfo.tick_lower_index,P=o.autoPoolPositionInfo.tick_upper_index;console.log(u[w],"list[i]"),console.log((h=o==null?void 0:o.object)==null?void 0:h.current_sqrt_price,"##poolInfo?.object?.current_sqrt_price");const v={tick_lower_index:_,tick_upper_index:P,current_sqrt_price:(k=o==null?void 0:o.object)==null?void 0:k.current_sqrt_price,liquidity:Number(c)>0?C.get_share_liquidity_by_amount({liquidity:o==null?void 0:o.liquidity,total_supply:o==null?void 0:o.total_supply},c):0};console.log(o,"##position");const r=f.getCoinAmountFromLiquidity({pool:{...o,current_sqrt_price:(L=o==null?void 0:o.object)==null?void 0:L.current_sqrt_price},position:v,roundUp:!1}),d=r.coinaAmount,g=r.coinbAmount;console.log(o.protocol_fee_rate,"##newPoolInfo.protocol_fee_rate");const S=d,q=g,A=new s(y).mul(new s(d)).toNumber(),j=new s(p).mul(new s(g)).toNumber(),R=A>0&&A<.01?"<$0.01":`$${D(x(A,2))}`,V=j>0&&j<.01?"<$0.01":`$${D(x(j,2))}`;let O=0;Number(c)>0&&(O=new s(c).div(Math.pow(10,a.decimals)));const F=y&&p?x(new s(A).add(new s(j)).toString(),2):"",E=o.total_supply;let B=0;O>0&&E>0&&(B=new s(O).mul(Math.pow(10,a.decimals)).div(new s(E)).mul(100).toNumber()),console.log(B,"##myShare");const K=new s(1).div(Math.pow(10,o.decimals)).toNumber();let U=0;B>1?U=x(B,2):B>0&&B<K?U=`<${K}`:B==0?U=0:U=z(B,1),console.log(c,O.toString(),"###balance"),this.positionInfoObj[o.id]={tick_lower_index:_,tick_upper_index:P,current_sqrt_price:(l=o==null?void 0:o.object)==null?void 0:l.current_sqrt_price,myLiquidity:$(c,a.decimals),amountA:S,amountB:q,...o,lpInfo:a,myAmountAUSD:R,myAmountBUSD:V,myLiquidityUSD:F,myShare:U},n.push({tick_lower_index:_,tick_upper_index:P,current_sqrt_price:(T=o==null?void 0:o.object)==null?void 0:T.current_sqrt_price,myLiquidity:$(c,a.decimals),amountA:S,amountB:q,...o,lpInfo:a,myAmountAUSD:R,myAmountBUSD:V,myLiquidityUSD:F,myShare:U})}this.positionInfoList=n,console.log(this.positionInfoObj,"this.positionInfoObj###"),console.log(this.positionInfoList,"###this.positionInfoList")},async updatePositionItem(e){var q,A;const u=M("Sui"),f=Y("Sui"),n=await u.getAutoPool(e);console.log("newPoolInfo:",n),console.log("this.positionInfoObj[id]:",this.positionInfoObj[e]);const t={...this.positionInfoObj[e],autoPoolPositionInfo:n.positins[0]},m=await u.getLpBalance(t.lp_token_type),b=(await f.getTokenListByCoinType([t.lp_token_type]))[0];console.log(m,"###balance updatePositionItem");const h=t.autoPoolPositionInfo.tick_lower_index,k=t.autoPoolPositionInfo.tick_upper_index,L={tick_lower_index:h,tick_upper_index:k,current_sqrt_price:t.object.current_sqrt_price,liquidity:C.get_share_liquidity_by_amount({liquidity:n==null?void 0:n.liquidity,total_supply:n==null?void 0:n.total_supply},m)},l=f.getCoinAmountFromLiquidity({pool:{current_sqrt_price:t.object.current_sqrt_price,...t},position:L,roundUp:!1});console.log(l,"amountInfo###"),l.coinaAmount,l.coinbAmount;const T=l.coinaAmount,w=l.coinbAmount,{RATES:o}=this.getPoolStore,c=n.total_supply,a=((q=o[t.coinA.address])==null?void 0:q.price)||0,y=((A=o[t.coinB.address])==null?void 0:A.price)||0,p=new s(a).mul(new s(l==null?void 0:l.coinaAmount)).toNumber(),_=new s(y).mul(new s(l==null?void 0:l.coinbAmount)).toNumber(),P=p>0&&p<.01?"<$0.01":`$${D(x(p,2))}`,v=_>0&&_<.01?"<$0.01":`$${D(x(_,2))}`;let r=new s(0);Number(m)>0&&(r=new s(m).div(Math.pow(10,b.decimals)));const d=new s(r).mul(Math.pow(10,t.lpInfo.decimals)).div(new s(c)).mul(100).toNumber();let g=0;const S=new s(1).div(Math.pow(10,t.decimals)).toNumber();d>1?g=x(d,2):d>0&&d<S?g=`<${S}`:g=z(d,1),this.positionInfoObj[e]={...t,tick_lower_index:h,tick_upper_index:k,current_sqrt_price:t.object.current_sqrt_price,myLiquidity:$(m,b.decimals),amountA:T,amountB:w,myShare:g,myAmountAUSD:P,myAmountBUSD:v},console.log(this.positionInfoObj[e],"###this.positionInfoObj[id]")},async getAutoPoolAPY(){}}});export{M as a,lo as u};
