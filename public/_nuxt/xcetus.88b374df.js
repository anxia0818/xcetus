import{p as g,a as m,s as w,J as p}from"./pool.7113183f.js";import{u as d}from"./useWhale.a08eb724.js";import{a4 as v}from"./entry.a5afa453.js";import{c as y}from"./sha256.e2617b6c.js";import{D as u}from"./decimal.0e8aa3f1.js";const A=v("xcetus",{state:()=>({venft_id:"",xWhaleBalance:"--",venftInfo:{},pendingAmount:"--",newPendingAmount:"--",whaleBalance:"--",ownerLocks:[],availableXwhale:"--",redeemingXwhale:"--",nextStartTime:"",xcetusShare:"--",pendingCoinInfo:{},newPendingCoinInfo:{},cetusApr:"",claimLoading:"",dividendManagerInfo:{}}),actions:{async getOwnerVeNFT(t){const n=d("Sui");try{const e=await n.getOwnerVeNFT(t);console.log(e,"===>result"),e?(this.venft_id=e.id,this.xWhaleBalance=g(e.xcetus_balance,9),this.venftInfo={id:e.id,type:e.type,index:e.index,xcetus_balance:e.xcetus_balance},console.log("执行37"),this.getVeNFTDividendInfo()):(this.xWhaleBalance="0",this.availableXwhale="0",this.redeemingXwhale="0",this.pendingAmount="0",this.newPendingAmount="0")}catch{this.xWhaleBalance="--",this.availableXwhale="--",this.redeemingXwhale="--",this.pendingAmount="--",this.newPendingAmount="--"}},async getVeNFTDividendInfo(){const t=d("Sui"),n=m("Sui");try{const e=await t.getVeNFTDividendInfo(this.venft_id,this.dividendManagerInfo),l=await t.getPeriod(this.dividendManagerInfo),r=await n.getTokenList();console.log(l,"===>period"),console.log(JSON.stringify(e),"===>result");const c=[];if(e&&e.rewards&&e.rewards.length>0){for(let s=0;s<e.rewards.length;s++)if(e.rewards[s].period<l){const i=e.rewards[s].rewards;for(let o=0;o<i.length;o++){const a=i[o];Number(a.amount)>0&&c.push({...a})}}if(c&&c.length>0){const s={};for(let o=0;o<c.length;o++){const a=c[o];if(s[a.coin_type])s[a.coin_type].amount=new u(s[a.coin_type].amount).add(new u(a.amount)).toString();else{let h=r.filter(f=>f.address==a.coin_type)[0];h||(h=(await n.getTokenListByCoinType([a.coin_type]))[0]),s[a.coin_type]={...a,...h}}}const i=Object.values(s);console.log(i,"===>rewardArr"),this.pendingCoinInfo=i[0],this.pendingAmount=w(g(i[0].amount,i[0].decimals),6),this.newPendingCoinInfo=i&&i.length>1?i[1]:{},this.newPendingAmount=i&&i.length>1?w(g(i[1].amount,i[1].decimals),6):0}else{const s=await t.getPhaseDividendInfo(this.dividendManagerInfo);console.log(s.bonus_types[0],"==>phaseDividendInfo.bonus_types[0]");const i=s.bonus.filter(h=>Number(h.value)>0)[0].name,o=p(i,!1);console.log(o,"==>newPendingCoinAddress");let a=r.filter(h=>h.address==(o=="0x0000000000000000000000000000000000000000000000000000000000000002::sui::SUI"?"0x2::sui::SUI":o))[0];a||(a=(await n.getTokenListByCoinType([o]))[0],console.log(a,"tokenList===>")),this.newPendingCoinInfo=a,console.log(a,"===>tokenInfo"),console.log(s,"==>phaseDividendInfo"),this.pendingAmount="0",this.newPendingAmount="0"}}}catch{this.pendingAmount="--",this.newPendingAmount="--"}},async getDividendManager(){const n=await d("Sui").getDividendManager();this.nextStartTime=n.nextStartTime,this.dividendManagerInfo=n,this.getVeNFTDividendInfo()},async getAccountWhaleBalance(t){const e=await d("Sui").getOwnerCetusCoins(t);if(console.log(e,"==>assets"),e&&e.length>0){let l=new u(0);e.forEach(r=>{console.log(g(r.balance.toString(),9),"===>prettyAmount(ele.balance.toString(), 9)"),l=l.add(g(r.balance.toString(),9))}),console.log(this.whaleBalance,"===>this.whaleBalance"),this.whaleBalance=l}else this.whaleBalance="0"},async getOwnerLockCetuss(t){const e=await d("Sui").getOwnerLockCetuss(t);console.log(e,"assets===>");const l=e.sort((r,c)=>r.locked_until_time-c.locked_until_time);this.ownerLocks=l,console.log(this.ownerLocks,"===>this.ownerLocks"),this.setClaimLoading(""),this.getAvailableXCetus()},async getAvailableXCetus(){const t=d("Sui");console.log(this.ownerLocks,"==>this.ownerLocks");const n=await t.getAvailableXCetus(this.venftInfo,this.ownerLocks);console.log(n,"==>result1111"),this.availableXwhale=g(n,9),console.log(this.xWhaleBalance,"===>this.xWhaleBalance"),console.log(this.availableXwhale,"===>this.availableXwhale"),this.redeemingXwhale=this.xWhaleBalance!=="--"?new u(this.xWhaleBalance).sub(new u(this.availableXwhale)).toString():"--"},async getMyShare(t){const n=d("Sui");try{const e=await n.getMyShare(t);e?(this.xcetusShare=Number(e)>0&&Number(e)<.01?"<0.01":e,console.log(e,"result===>124")):this.xcetusShare="0"}catch(e){console.log(e,"e===>"),this.xcetusShare=""}},async getXcetusApr(){const{data:t}=await fetch(`${y.Sui.api}/v2/sui/storm/dividend_rewards`).then(e=>e.json()),n=t.apr&&t.apr.replace("%","");this.cetusApr=Number(n)>0&&Number(n)<.01?"<0.01":n,console.log(t,"data===>")},loginOut(){this.venft_id="",this.xWhaleBalance="--",this.venftInfo={},this.pendingAmount="--",this.whaleBalance="--",this.ownerLocks=[],this.availableXwhale="--",this.redeemingXwhale="--",this.xcetusShare="--"},setClaimLoading(t){this.claimLoading=t}}});export{A as u};
