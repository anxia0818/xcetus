import{a6 as M,l as F,T as R,a7 as E}from"./entry.5b88b460.js";import{c,a as V}from"./sha256.8b2734fc.js";import{G as $,C as O,H as x,k as C,u as K,b as h,p as j,s as y}from"./pool.95c7945c.js";import{C as G}from"./index.76cc8e7d.js";import{D as s}from"./decimal.0e8aa3f1.js";function U(o){const l={launchpad:c[o||"Sui"].launchpad,ido:c[o||"Sui"].ido,xcetus:c[o||"Sui"].xcetus,xcetus_dividends:c[o||"Sui"].xcetus_dividends,cetus_faucet:c[o||"Sui"].cetus_faucet,xtoken:c[o||"Sui"].xtoken,xtoken_dividends:c[o||"Sui"].xtoken_dividends,token_faucet:c[o||"Sui"].token_faucet,booster:c[o||"Sui"].booster,maker_bonus:c[o||"Sui"].maker_bonus,liquidity_stratefy:c[o||"Sui"].liquidity_stratefy,mirror_pool:c[o||"Sui"].mirror_pool},n={fullRpcUrl:localStorage.getItem(`${o}-currentRpclocal2`)||c[o||"Sui"].fullRpcUrl,simulationAccount:c[o||"Sui"].simulationAccount,cetus_config:c[o||"Sui"].cetus_config,clmm_pool:c[o||"Sui"].clmm_pool,integrate:c[o||"Sui"].integrate,deepbook:c[o||"Sui"].deepbook,deepbook_endpoint_v2:c[o||"Sui"].deepbook_endpoint_v2,aggregatorUrl:c[o||"Sui"].aggregatorUrl},i=new $(n),e=M(new G(l,i)),r=V(),p=F(()=>r);R(()=>{p.value.address&&(i.senderAddress=p.value.address)});const m=async()=>{console.log(e,"sdk###");const t=await e.Vaults.getVaultList();return t&&t.data||[]},f=async t=>{console.log(t,"###coinType");const a=await e.ClmmSDK.fullClient.getBalance({owner:i.senderAddress,coinType:t});return a&&a.totalBalance},u=t=>({transactionBlock:t,options:{showEffects:!0,showEvents:!0,showInput:!0,showRawInput:!0,showObjectChanges:!0,showBalanceChanges:!0}});return{getAutoPools:m,getLpBalance:f,deposit:async t=>{const{lowerTick:a,upperTick:d,coinAmount:g,fix_amount_a:S,slippage:w,curSqrtPrice:_}=t;console.log(t,"params###");const k=O.estLiquidityAndcoinAmountFromOneAmounts(a,d,g,S,!0,w,_),b=S?g.toString():k.tokenMaxA.toString(),q=S?k.tokenMaxB.toString():g.toString(),L=await e.Vaults.deposit({vault_id:t.id,clmm_pool:t.clmm_pool,lp_token_type:t.lp_token_type,amount_a:b,amount_b:q,fix_amount_a:S,slippage:w,coinTypeA:t.coinTypeA,coinTypeB:t.coinTypeB});return u(L)},remove:async t=>{const{lowerSqrtPrice:a,upperSqrtPrice:d,lpTokenAmount:g,curSqrtPrice:S,slippage:w}=t,_=O.getCoinAmountFromLiquidity(g,S,a,d,!0),k=x(_.coinA.toString()).mul(x(1-w)),b=x(_.coinB.toString()).mul(x(1-w));console.log(t.lpTokenAmount.toString(),k.toString(),b.toString(),"params##");const q=await e.Vaults.remove({vault_id:t.id,clmm_pool:t.clmm_pool,lp_token_type:t.lp_token_type,coinTypeA:t.coinTypeA,coinTypeB:t.coinTypeB,lp_token_amount:g.toString(),min_amount_a:C(k.toString(),0)||"",min_amount_b:C(b.toString(),0)||""});return u(q)}}}const Q=E("autoPool",{state:()=>({autoPoolList:[],positionInfoObj:{},positionInfoList:[],positionUSDObj:{},apyObj:{}}),getters:{getPoolStore(){return K()}},actions:{async getAutoPoolList(){const l=await U("Sui").getAutoPools();console.log(l,"list###");const n=this.getPoolStore,i=l.map(e=>({...n.poolConfigObj[e.pool_id],id:e.id,lp_token_type:e.lp_token_type,autoPoolPositionInfo:e.positins[0],is_pause:e.is_pause}));this.autoPoolList=i,console.log(i,"##autoPoolList")},async getMyAutoPoolPosition(){const o=U("Sui"),l=this.autoPoolList,n=h("Sui"),i=[];for(let e=0;e<l.length;e++){const r=l[e],p=await o.getLpBalance(l[e].lp_token_type),m=(await n.getTokenListByCoinType([l[e].lp_token_type]))[0];console.log(m,"lpInfo##");let f=new s(0);Number(p)>0&&(f=new s(p).div(Math.pow(10,m.decimals))),console.log(p,f.toString(),"###balance");const u=r.autoPoolPositionInfo.tick_lower_index,A=r.autoPoolPositionInfo.tick_upper_index,I={tick_lower_index:u,tick_upper_index:A,current_sqrt_price:r.object.current_sqrt_price,liquidity:p},t=n.getCoinAmountFromLiquidity({pool:{current_sqrt_price:r.object.current_sqrt_price,...r},position:I,roundUp:!1}),a=t.coinaAmount,d=t.coinbAmount;this.positionInfoObj[r.address]={tick_lower_index:u,tick_upper_index:A,current_sqrt_price:r.object.current_sqrt_price,myLiquidity:j(p,m.decimals),amountA:a,amountB:d,...r,lpInfo:m},i.push({tick_lower_index:u,tick_upper_index:A,current_sqrt_price:r.object.current_sqrt_price,myLiquidity:j(p,m.decimals),amountA:a,amountB:d,...r,lpInfo:m})}this.positionInfoList=i,console.log(this.positionInfoObj,"this.positionInfoObj###")},async getUserPositionUSD(){const{RATES:o}=this.getPoolStore,l=h("Sui");console.log(this.positionInfoList,"###this.positionInfoList"),this.positionInfoList.forEach(n=>{var P,B;const i=((P=o[n.coinA.address])==null?void 0:P.price)||0,e=((B=o[n.coinB.address])==null?void 0:B.price)||0,r=new s(i).mul(new s(n==null?void 0:n.amountA)).toString(),p=new s(e).mul(new s(n==null?void 0:n.amountB)).toString(),m=2,f=2,u=y(r,m),A=y(p,f),I=new s(u).add(new s(A)).toString(),t=n.myLiquidity,a=n.autoPoolPositionInfo.liquidity;console.log(t,a,"####totalLiquidity");const d=new s(t).mul(Math.pow(10,n.lpInfo.decimals)).div(new s(a)).mul(100).toNumber(),g=new s(1).div(Math.pow(10,n.decimals)).toNumber();let S;d>1?S=y(d,2):d>0&&d<g?S=`<${g}`:S=y(d,n.decimlas);const w={tick_lower_index:n.tick_lower_index,tick_upper_index:n.tick_upper_index,current_sqrt_price:n.object.current_sqrt_price,liquidity:a},_=l.getCoinAmountFromLiquidity({pool:{current_sqrt_price:n.object.current_sqrt_price,...n},position:w,roundUp:!1});console.log(_,"poolAmountInfo##");const k=new s(i).mul(new s(_==null?void 0:_.coinaAmount)).toString(),b=new s(e).mul(new s(_==null?void 0:_.coinbAmount)).toString(),q=y(k,m),L=y(b,f);console.log(_,"###poolAmountInfo"),console.log(d,"###myShare"),console.log(r,p,"##myPosition"),this.positionInfoObj[n.address]={...this.positionInfoObj[n.address],myAmountAUSD:u,myAmountBUSD:A,myLiquidityUSD:I,myShare:S,poolAmoutnA:q,poolAmoutnB:L},console.log(this.positionInfoObj,"###this.positionInfoObj")})},async updatePositionItem(o){var D,T;const l=U("Sui"),n=h("Sui"),i=this.positionInfoObj[o],e=await l.getLpBalance(i.lp_token_type),r=(await n.getTokenListByCoinType([i.lp_token_type]))[0];console.log(e,"###balance updatePositionItem");const p=i.autoPoolPositionInfo.tick_lower_index,m=i.autoPoolPositionInfo.tick_upper_index,f={tick_lower_index:p,tick_upper_index:m,current_sqrt_price:i.object.current_sqrt_price,liquidity:e},u=n.getCoinAmountFromLiquidity({pool:{current_sqrt_price:i.object.current_sqrt_price,...i},position:f,roundUp:!1});console.log(u,"amountInfo###");const A=u.coinaAmount,I=u.coinbAmount,{RATES:t}=this.getPoolStore,a=i.autoPoolPositionInfo.liquidity,d=2,g=2,S=((D=t[i.coinA.address])==null?void 0:D.price)||0,w=((T=t[i.coinB.address])==null?void 0:T.price)||0,_=new s(S).mul(new s(u==null?void 0:u.coinaAmount)).toString(),k=new s(w).mul(new s(u==null?void 0:u.coinbAmount)).toString(),b=y(_,d),q=y(k,g);let L=new s(0);Number(e)>0&&(L=new s(e).div(Math.pow(10,r.decimals)));const P=new s(L).mul(Math.pow(10,i.lpInfo.decimals)).div(new s(a)).mul(100).toNumber();let B;const v=new s(1).div(Math.pow(10,i.decimals)).toNumber();P>1?B=y(P,2):P>0&&P<v?B=`<${v}`:B=y(P,i.decimlas),this.positionInfoObj[i.address]={...i,tick_lower_index:p,tick_upper_index:m,current_sqrt_price:i.object.current_sqrt_price,myLiquidity:j(e,r.decimals),amountA:A,amountB:I,myShare:B,myAmountAUSD:b,myAmountBUSD:q}},async getAutoPoolAPY(){const{data:o}=await fetch(`${c.Sui.api}/v2/sui/auto_pools`).then(l=>l.json());o&&o.pools&&o.pools.length>0&&(this.apyObj=Object.fromEntries(o.pools.map((l,n)=>[l.clmm_pool,l])),console.log(o,"data##"))}}});export{U as a,Q as u};
