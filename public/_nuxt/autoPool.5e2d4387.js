import{a6 as G,l as H,T as Q,a7 as X}from"./entry.8de2e4f5.js";import{c as i,a as Z}from"./sha256.30d5a342.js";import{I as N,C as J,J as U,l as W,u as oo,b as Y,a as D,s as B,f as z,p as $}from"./pool.a83cca96.js";import{C as to,V as C}from"./index.40a6c4e4.js";import{D as c}from"./decimal.0e8aa3f1.js";function M(t){const n={launchpad:i[t||"Sui"].launchpad,ido:i[t||"Sui"].ido,xcetus:i[t||"Sui"].xcetus,xcetus_dividends:i[t||"Sui"].xcetus_dividends,cetus_faucet:i[t||"Sui"].cetus_faucet,xtoken:i[t||"Sui"].xtoken,xtoken_dividends:i[t||"Sui"].xtoken_dividends,token_faucet:i[t||"Sui"].token_faucet,booster:i[t||"Sui"].booster,maker_bonus:i[t||"Sui"].maker_bonus,liquidity_stratefy:i[t||"Sui"].liquidity_stratefy,vaults:i[t||"Sui"].vaults},A={fullRpcUrl:localStorage.getItem(`${t}-currentRpclocal2`)||i[t||"Sui"].fullRpcUrl,simulationAccount:i[t||"Sui"].simulationAccount,cetus_config:i[t||"Sui"].cetus_config,clmm_pool:i[t||"Sui"].clmm_pool,integrate:i[t||"Sui"].integrate,deepbook:i[t||"Sui"].deepbook,deepbook_endpoint_v2:i[t||"Sui"].deepbook_endpoint_v2,aggregatorUrl:i[t||"Sui"].aggregatorUrl},s=new N(A),e=G(new to(n,s)),m=Z(),w=H(()=>m);Q(()=>{w.value.address&&(s.senderAddress=w.value.address)});const j=async()=>{console.log(e,"sdk###");const o=await e.Vaults.getVaultList();return o&&o.data||[]},k=async o=>await e.Vaults.getVault(o),x=async o=>{console.log(o,"###coinType");const l=await e.ClmmSDK.fullClient.getBalance({owner:s.senderAddress,coinType:o});return l&&l.totalBalance},r=o=>({transactionBlock:o,options:{showEffects:!0,showEvents:!0,showInput:!0,showRawInput:!0,showObjectChanges:!0,showBalanceChanges:!0}});return{getAutoPools:j,getLpBalance:x,deposit:async o=>{const{lowerTick:l,upperTick:a,coinAmount:y,fix_amount_a:p,slippage:_,curSqrtPrice:P,rewarder_coin_types:L}=o;console.log(o,"params###");const u=J.estLiquidityAndcoinAmountFromOneAmounts(l,a,y,p,!0,_,P),d=p?y.toString():u.tokenMaxA.toString(),g=p?u.tokenMaxB.toString():y.toString(),S=await e.Vaults.deposit({vault_id:o.id,clmm_pool:o.clmm_pool,lp_token_type:o.lp_token_type,amount_a:d,amount_b:g,fix_amount_a:p,slippage:_,coinTypeA:o.coinTypeA,coinTypeB:o.coinTypeB,rewarder_coin_types:[]});return r(S)},remove:async o=>{const{lowerSqrtPrice:l,upperSqrtPrice:a,lpTokenAmount:y,curSqrtPrice:p,slippage:_,rewarder_coin_types:P,id:L}=o;console.log(o,"params##");const u=J.getCoinAmountFromLiquidity(y,p,l,a,!0),d=U(u.coinA.toString()).mul(U(1-_)),g=U(u.coinB.toString()).mul(U(1-_));console.log(u.coinA.toString(),"##.toString()"),console.log(o.lpTokenAmount.toString(),d.toString(),g.toString(),"params##");const S=await k(L),q=C.get_protocol_fee_amount(S,u.coinA.toString()),b=C.get_protocol_fee_amount(S,u.coinB.toString());console.log(S,"##vault"),console.log(d.toString(),q,"###protocol_fee_amount_a");const v=await e.Vaults.remove({vault_id:o.id,clmm_pool:o.clmm_pool,lp_token_type:o.lp_token_type,coinTypeA:o.coinTypeA,coinTypeB:o.coinTypeB,lp_token_amount:y.toString(),min_amount_a:W(U(u.coinA.toString()).sub(q).toString(),0)||"",min_amount_b:W(U(u.coinB.toString()).sub(b).toString(),0)||"",rewarder_coin_types:[]});return r(v)},getAutoPool:k}}const lo=X("autoPool",{state:()=>({autoPoolList:[],autoPoolObj:{},positionInfoObj:{},positionInfoList:[],positionUSDObj:{},apyObj:{}}),getters:{getPoolStore(){return oo()}},actions:{async getAutoPoolList(){const n=await M("Sui").getAutoPools();console.log(n,"list###");const A=this.getPoolStore,s=n.map(e=>({...A.poolConfigObj[e.pool_id],id:e.id,lp_token_type:e.lp_token_type,autoPoolPositionInfo:e.positins[0],is_pause:e.is_pause,total_supply:e.total_supply,liquidity:e.liquidity,protocol_fee_rate:e.protocol_fee_rate}));this.autoPoolList=s,this.autoPoolObj=Object.fromEntries(s.map((e,m)=>[e.address,e])),this.getMyAutoPoolPosition(),console.log(s,"##autoPoolList")},async getMyAutoPoolPosition(){var m,w,j,k,x,r,I;const t=M("Sui"),n=this.autoPoolList,A=Y("Sui"),s=[],{RATES:e}=this.getPoolStore;for(let f=0;f<n.length;f++){const o=n[f];console.log(o,"poolINfo###");const l=await t.getLpBalance(n[f].lp_token_type);console.log(l,"balance##");const a=(await A.getTokenListByCoinType([n[f].lp_token_type]))[0];console.log(a,"lpInfo##");const y=((m=e[o.coinA.address])==null?void 0:m.price)||"",p=((w=e[o.coinB.address])==null?void 0:w.price)||"",_=o.autoPoolPositionInfo.tick_lower_index,P=o.autoPoolPositionInfo.tick_upper_index;console.log(n[f],"list[i]"),console.log((j=o==null?void 0:o.object)==null?void 0:j.current_sqrt_price,"##poolInfo?.object?.current_sqrt_price");const L={tick_lower_index:_,tick_upper_index:P,current_sqrt_price:(k=o==null?void 0:o.object)==null?void 0:k.current_sqrt_price,liquidity:Number(l)>0?C.get_share_liquidity_by_amount({liquidity:o==null?void 0:o.liquidity,total_supply:o==null?void 0:o.total_supply},l):0};console.log(o,"##position");const u=A.getCoinAmountFromLiquidity({pool:{...o,current_sqrt_price:(x=o==null?void 0:o.object)==null?void 0:x.current_sqrt_price},position:L,roundUp:!1}),d=u.coinaAmount,g=u.coinbAmount;console.log(o.protocol_fee_rate,"##newPoolInfo.protocol_fee_rate");const S=d,q=g,b=new c(y).mul(new c(d)).toNumber(),v=new c(p).mul(new c(g)).toNumber(),R=b>0&&b<.01?"<$0.01":`$${D(B(b,2))}`,V=v>0&&v<.01?"<$0.01":`$${D(B(v,2))}`;let T=0;Number(l)>0&&(T=new c(l).div(Math.pow(10,a.decimals)));const E=y&&p?B(new c(b).add(new c(v)).toString(),2):"",F=o.total_supply;let h=0;T>0&&F>0&&(h=new c(T).mul(Math.pow(10,a.decimals)).div(new c(F)).mul(100).toNumber()),console.log(h,"##myShare");const K=new c(1).div(Math.pow(10,o.decimals)).toNumber();let O=0;h>1?O=B(h,2):h>0&&h<K?O=`<${K}`:h==0?O=0:O=z(h,1),console.log(l,T.toString(),"###balance"),this.positionInfoObj[o.id]={tick_lower_index:_,tick_upper_index:P,current_sqrt_price:(r=o==null?void 0:o.object)==null?void 0:r.current_sqrt_price,myLiquidity:$(l,a.decimals),amountA:S,amountB:q,...o,lpInfo:a,myAmountAUSD:R,myAmountBUSD:V,myLiquidityUSD:E,myShare:O},s.push({tick_lower_index:_,tick_upper_index:P,current_sqrt_price:(I=o==null?void 0:o.object)==null?void 0:I.current_sqrt_price,myLiquidity:$(l,a.decimals),amountA:S,amountB:q,...o,lpInfo:a,myAmountAUSD:R,myAmountBUSD:V,myLiquidityUSD:E,myShare:O})}this.positionInfoList=s,console.log(this.positionInfoObj,"this.positionInfoObj###"),console.log(this.positionInfoList,"###this.positionInfoList")},async updatePositionItem(t){var q,b;const n=M("Sui"),A=Y("Sui"),s=await n.getAutoPool(t);console.log("newPoolInfo:",s),console.log("this.positionInfoObj[id]:",this.positionInfoObj[t]);const e={...this.positionInfoObj[t],autoPoolPositionInfo:s.positins[0]},m=await n.getLpBalance(e.lp_token_type),w=(await A.getTokenListByCoinType([e.lp_token_type]))[0];console.log(m,"###balance updatePositionItem");const j=e.autoPoolPositionInfo.tick_lower_index,k=e.autoPoolPositionInfo.tick_upper_index,x={tick_lower_index:j,tick_upper_index:k,current_sqrt_price:e.object.current_sqrt_price,liquidity:C.get_share_liquidity_by_amount({liquidity:s==null?void 0:s.liquidity,total_supply:s==null?void 0:s.total_supply},m)},r=A.getCoinAmountFromLiquidity({pool:{current_sqrt_price:e.object.current_sqrt_price,...e},position:x,roundUp:!1});console.log(r,"amountInfo###"),r.coinaAmount,r.coinbAmount;const I=r.coinaAmount,f=r.coinbAmount,{RATES:o}=this.getPoolStore,l=s.total_supply,a=((q=o[e.coinA.address])==null?void 0:q.price)||0,y=((b=o[e.coinB.address])==null?void 0:b.price)||0,p=new c(a).mul(new c(r==null?void 0:r.coinaAmount)).toNumber(),_=new c(y).mul(new c(r==null?void 0:r.coinbAmount)).toNumber(),P=p>0&&p<.01?"<$0.01":`$${D(B(p,2))}`,L=_>0&&_<.01?"<$0.01":`$${D(B(_,2))}`;let u=new c(0);Number(m)>0&&(u=new c(m).div(Math.pow(10,w.decimals)));const d=new c(u).mul(Math.pow(10,e.lpInfo.decimals)).div(new c(l)).mul(100).toNumber();let g=0;const S=new c(1).div(Math.pow(10,e.decimals)).toNumber();d>1?g=B(d,2):d>0&&d<S?g=`<${S}`:g=z(d,1),this.positionInfoObj[t]={...e,tick_lower_index:j,tick_upper_index:k,current_sqrt_price:e.object.current_sqrt_price,myLiquidity:$(m,w.decimals),amountA:I,amountB:f,myShare:g,myAmountAUSD:P,myAmountBUSD:L},console.log(this.positionInfoObj[t],"###this.positionInfoObj[id]")},async getAutoPoolAPY(){const{data:t}=await fetch(`${i.Sui.api}/v2/sui/auto_pools`).then(n=>n.json());t&&t.pools&&t.pools.length>0&&(this.apyObj=Object.fromEntries(t.pools.map((n,A)=>[n.object_id,{...n,apr:n.apr.replace("%","")>0&&n.apr.replace("%","")<.01?"<0.01%":B(n.apr.replace("%",""),2)+"%",resultApr:n.apr.replace("%","")}])),console.log(this.apyObj,"data##"))}}});export{M as a,lo as u};
