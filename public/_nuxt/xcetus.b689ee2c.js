import{_ as C,S as A,i as D,a2 as v,s as f,D as r,c as B,p as y,b as F}from"./pool.37dfcc8a.js";import{$ as W,m as P,L as R,a0 as V}from"./entry.bed101c3.js";function l(s){const i={fullRpcUrl:localStorage.getItem(`${s}-current-rpc`)||C[s||"Sui"].fullRpcUrl,faucetURL:localStorage.getItem(`${s}-current-rpc`)||C[s||"Sui"].faucetURL,simulationAccount:C[s||"Sui"].simulationAccount,xcetus:C[s||"Sui"].xcetus},e=W(new A(i)),u=D(),c=P(()=>u);R(()=>{c.value.address&&(e.senderAddress=c.value.address)});const d=async t=>await e.XCetusModule.getOwnerLockCetuss(t),g=async(t,n)=>v.getAvailableXCetus(t,n),m=async t=>await e.XCetusModule.getOwnerCetusCoins(t),S=async t=>await e.XCetusModule.getOwnerVeNFT(t),h=async(t,n)=>{const a={amount:t};n&&(a.venft_id=n);const o=await e.XCetusModule.convertPayload(a);return w(o)},p=async()=>{const t=await e.XCetusModule.mintVeNFTPayload();return w(t)},X=async(t,n)=>{const a=await e.XCetusModule.redeemNum(t,n);return{amountOut:a.amountOut,percent:f(new r(a.percent).mul(new r(100)).toString(),2)}},x=async(t,n)=>{const a=await e.XCetusModule.reverseRedeemNum(t,n);return{amountOut:a.amountOut,percent:f(new r(a.percent).mul(new r(100)).toString(),2)}},b=async(t,n,a)=>{const o=await e.XCetusModule.redeemLockPayload({venft_id:n,amount:t,lock_day:a});return w(o)},M=t=>v.getLockingCetuss(t),k=async(t,n)=>{const a=await e.XCetusModule.getLockCetus(t);if(a&&v.isLocked(a)){const o=e.XCetusModule.cancelRedeemPayload({venft_id:n,lock_id:t});return w(o)}},L=async(t,n)=>{const a=await e.XCetusModule.getLockCetus(t);if(a&&!v.isLocked(a)){const o=await e.XCetusModule.redeemPayload({venft_id:n,lock_id:t});return w(o)}},T=t=>{const n=Date.parse(new Date().toString())/1e3,a=new r(n).sub(t.start_time).div(new r(t.interval_day).mul(60*10)).toFixed(0,r.ROUND_UP);return new r(t.start_time).add(new r(a).mul(60*70)).toString()},N=async()=>{const t=await e.XCetusModule.getDividendManager();return{nextStartTime:T(t),...t}},_=async(t,n)=>{const a=await e.XCetusModule.getVeNFTDividendInfo(n.venft_dividends.id,t);return{rewards:a&&a.rewards||[]}},I=async t=>{const n=await e.XCetusModule.getDividendManager();if(n.bonus_types.length>0){const a=await e.XCetusModule.redeemDividendPayload(t,n.bonus_types);return w(a)}},O=async t=>{const n=await e.XCetusModule.getOwnerVeNFT(t);if(n){const a=await e.XCetusModule.getXcetusManager(),o=new r(n.xcetus_balance).div(a.treasury).mul(100).toString();return Number(o)>0&&Number(o)<.01?"<0.01":f(o,2)}else return 0},w=t=>({transactionBlock:t,options:{showEffects:!0,showEvents:!0,showInput:!0,showRawInput:!0,showObjectChanges:!0,showBalanceChanges:!0}});return{getOwnerLockCetuss:d,getOwnerCetusCoins:m,getOwnerVeNFT:S,depositCetus:h,getMintVeNFTPayload:p,redeemNum:X,getRedeemLockPayload:b,getAvailableXCetus:g,getLockingCetuss:M,getCancelRedeemPayload:k,getVeNFTDividendInfo:_,reverseRedeemNum:x,getRedeemPayload:L,getRedeemDividendPayload:I,getMyShare:O,getDividendManager:N}}const E=V("xcetus",{state:()=>({venft_id:"",xWhaleBalance:"--",venftInfo:{},pendingAmount:"--",whaleBalance:"--",ownerLocks:[],availableXwhale:"--",redeemingXwhale:"--",nextStartTime:"",xcetusShare:"--",pendingCoinInfo:{},cetusApr:"",claimLoading:"",dividendManagerInfo:{}}),actions:{async getOwnerVeNFT(s){const i=l("Sui");try{const e=await i.getOwnerVeNFT(s);e&&!B(e)?(this.venft_id=e.id,this.xWhaleBalance=y(e.xcetus_balance,9),this.venftInfo={id:e.id,type:e.type,index:e.index,xcetus_balance:e.xcetus_balance},this.getVeNFTDividendInfo()):(this.xWhaleBalance="0",this.availableXwhale="0",this.redeemingXwhale="0",this.pendingAmount="0")}catch{this.xWhaleBalance="0",this.availableXwhale="0",this.redeemingXwhale="0",this.pendingAmount="0"}},async getVeNFTDividendInfo(){const s=l("Sui"),i=F("Sui");try{const e=await s.getVeNFTDividendInfo(this.venft_id,this.dividendManagerInfo);let u=0;if(e&&e.rewards){for(let c=0;c<e.rewards.length;c++){const d=e.rewards[c].rewards;for(let g=0;g<d.length;g++){const m=d[g];let h=(await i.getTokenList()).filter(p=>p.address==m.coin_type)[0];h||(h=await i.getTokenListByCoinType([m.coin_type])),this.pendingCoinInfo=h,u+=Number(y(m.amount,h.decimals))}}this.pendingAmount=f(u,this.pendingCoinInfo.decimals)}else this.pendingAmount="0"}catch{this.pendingAmount="0"}},async getDividendManager(){const i=await l("Sui").getDividendManager();this.nextStartTime=i.nextStartTime,this.dividendManagerInfo=i},async getAccountWhaleBalance(s){const e=await l("Sui").getOwnerCetusCoins(s);if(e&&e.length>0){let u=0;e.forEach(c=>{u+=Number(y(c.balance.toString(),9))}),this.whaleBalance=f(u,9)}else this.whaleBalance="0"},async getOwnerLockCetuss(s){const u=(await l("Sui").getOwnerLockCetuss(s)).sort((c,d)=>c.locked_until_time-d.locked_until_time);this.ownerLocks=u,this.setClaimLoading(""),this.getAvailableXCetus()},async getAvailableXCetus(){const i=await l("Sui").getAvailableXCetus(this.venftInfo,this.ownerLocks);this.availableXwhale=y(i,9),this.redeemingXwhale=this.xWhaleBalance!=="--"?new r(this.xWhaleBalance).sub(new r(this.availableXwhale)).toString():"--"},async getMyShare(s){const e=await l("Sui").getMyShare(s);this.xcetusShare=Number(e)>0&&Number(e)<.01?"<0.01":e},async getXcetusApr(){const{data:s}=await fetch(`${C.Sui.api}/v2/sui/storm/dividend_rewards`).then(e=>e.json()),i=s.apr&&s.apr.replace("%","");this.cetusApr=Number(i)>0&&Number(i)<.01?"<0.01":i},loginOut(){this.venft_id="",this.xWhaleBalance="--",this.venftInfo={},this.pendingAmount="--",this.whaleBalance="--",this.ownerLocks=[],this.availableXwhale="--",this.redeemingXwhale="--"},setClaimLoading(s){this.claimLoading=s}}});export{l as a,E as u};
