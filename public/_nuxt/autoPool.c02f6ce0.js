import{a6 as M,l as F,T as R,a7 as E}from"./entry.bfa0cd10.js";import{c,a as V}from"./sha256.4c727af8.js";import{G as $,C as O,H as x,k as C,u as K,b as h,p as j,s as f}from"./pool.fd972d93.js";import{C as G}from"./index.801441db.js";import{D as s}from"./decimal.0e8aa3f1.js";function v(o){const l={launchpad:c[o||"Sui"].launchpad,ido:c[o||"Sui"].ido,xcetus:c[o||"Sui"].xcetus,xcetus_dividends:c[o||"Sui"].xcetus_dividends,cetus_faucet:c[o||"Sui"].cetus_faucet,xtoken:c[o||"Sui"].xtoken,xtoken_dividends:c[o||"Sui"].xtoken_dividends,token_faucet:c[o||"Sui"].token_faucet,booster:c[o||"Sui"].booster,maker_bonus:c[o||"Sui"].maker_bonus,liquidity_stratefy:c[o||"Sui"].liquidity_stratefy,vauls:c[o||"Sui"].vauls},n={fullRpcUrl:localStorage.getItem(`${o}-currentRpclocal2`)||c[o||"Sui"].fullRpcUrl,simulationAccount:c[o||"Sui"].simulationAccount,cetus_config:c[o||"Sui"].cetus_config,clmm_pool:c[o||"Sui"].clmm_pool,integrate:c[o||"Sui"].integrate,deepbook:c[o||"Sui"].deepbook,deepbook_endpoint_v2:c[o||"Sui"].deepbook_endpoint_v2,aggregatorUrl:c[o||"Sui"].aggregatorUrl},i=new $(n),e=M(new G(l,i)),r=V(),p=F(()=>r);R(()=>{p.value.address&&(i.senderAddress=p.value.address)});const _=async()=>{console.log(e,"sdk###");const t=await e.Vaults.getVaultList();return t&&t.data||[]},A=async t=>{console.log(t,"###coinType");const a=await e.ClmmSDK.fullClient.getBalance({owner:i.senderAddress,coinType:t});return a&&a.totalBalance},u=t=>({transactionBlock:t,options:{showEffects:!0,showEvents:!0,showInput:!0,showRawInput:!0,showObjectChanges:!0,showBalanceChanges:!0}});return{getAutoPools:_,getLpBalance:A,deposit:async t=>{const{lowerTick:a,upperTick:d,coinAmount:y,fix_amount_a:S,slippage:k,curSqrtPrice:m,rewarder_coin_types:P}=t;console.log(t,"params###");const b=O.estLiquidityAndcoinAmountFromOneAmounts(a,d,y,S,!0,k,m),q=S?y.toString():b.tokenMaxA.toString(),B=S?b.tokenMaxB.toString():y.toString(),g=await e.Vaults.deposit({vault_id:t.id,clmm_pool:t.clmm_pool,lp_token_type:t.lp_token_type,amount_a:q,amount_b:B,fix_amount_a:S,slippage:k,coinTypeA:t.coinTypeA,coinTypeB:t.coinTypeB,rewarder_coin_types:P});return u(g)},remove:async t=>{const{lowerSqrtPrice:a,upperSqrtPrice:d,lpTokenAmount:y,curSqrtPrice:S,slippage:k,rewarder_coin_types:m}=t,P=O.getCoinAmountFromLiquidity(y,S,a,d,!0),b=x(P.coinA.toString()).mul(x(1-k)),q=x(P.coinB.toString()).mul(x(1-k));console.log(t.lpTokenAmount.toString(),b.toString(),q.toString(),"params##");const B=await e.Vaults.remove({vault_id:t.id,clmm_pool:t.clmm_pool,lp_token_type:t.lp_token_type,coinTypeA:t.coinTypeA,coinTypeB:t.coinTypeB,lp_token_amount:y.toString(),min_amount_a:C(b.toString(),0)||"",min_amount_b:C(q.toString(),0)||"",rewarder_coin_types:m});return u(B)}}}const Q=E("autoPool",{state:()=>({autoPoolList:[],positionInfoObj:{},positionInfoList:[],positionUSDObj:{},apyObj:{}}),getters:{getPoolStore(){return K()}},actions:{async getAutoPoolList(){const l=await v("Sui").getAutoPools();console.log(l,"list###");const n=this.getPoolStore,i=l.map(e=>({...n.poolConfigObj[e.pool_id],id:e.id,lp_token_type:e.lp_token_type,autoPoolPositionInfo:e.positins[0],is_pause:e.is_pause}));this.autoPoolList=i,console.log(i,"##autoPoolList")},async getMyAutoPoolPosition(){const o=v("Sui"),l=this.autoPoolList,n=h("Sui"),i=[];for(let e=0;e<l.length;e++){const r=l[e],p=await o.getLpBalance(l[e].lp_token_type),_=(await n.getTokenListByCoinType([l[e].lp_token_type]))[0];console.log(_,"lpInfo##");let A=new s(0);Number(p)>0&&(A=new s(p).div(Math.pow(10,_.decimals))),console.log(p,A.toString(),"###balance");const u=r.autoPoolPositionInfo.tick_lower_index,w=r.autoPoolPositionInfo.tick_upper_index,L={tick_lower_index:u,tick_upper_index:w,current_sqrt_price:r.object.current_sqrt_price,liquidity:p},t=n.getCoinAmountFromLiquidity({pool:{current_sqrt_price:r.object.current_sqrt_price,...r},position:L,roundUp:!1}),a=t.coinaAmount,d=t.coinbAmount;this.positionInfoObj[r.address]={tick_lower_index:u,tick_upper_index:w,current_sqrt_price:r.object.current_sqrt_price,myLiquidity:j(p,_.decimals),amountA:a,amountB:d,...r,lpInfo:_},i.push({tick_lower_index:u,tick_upper_index:w,current_sqrt_price:r.object.current_sqrt_price,myLiquidity:j(p,_.decimals),amountA:a,amountB:d,...r,lpInfo:_})}this.positionInfoList=i,console.log(this.positionInfoObj,"this.positionInfoObj###")},async getUserPositionUSD(){const{RATES:o}=this.getPoolStore,l=h("Sui");console.log(this.positionInfoList,"###this.positionInfoList"),this.positionInfoList.forEach(n=>{var g,I;const i=((g=o[n.coinA.address])==null?void 0:g.price)||0,e=((I=o[n.coinB.address])==null?void 0:I.price)||0,r=new s(i).mul(new s(n==null?void 0:n.amountA)).toString(),p=new s(e).mul(new s(n==null?void 0:n.amountB)).toString(),_=2,A=2,u=f(r,_),w=f(p,A),L=new s(u).add(new s(w)).toString(),t=n.myLiquidity,a=n.autoPoolPositionInfo.liquidity;console.log(t,a,"####totalLiquidity");const d=new s(t).mul(Math.pow(10,n.lpInfo.decimals)).div(new s(a)).mul(100).toNumber(),y=new s(1).div(Math.pow(10,n.decimals)).toNumber();let S;d>1?S=f(d,2):d>0&&d<y?S=`<${y}`:S=f(d,n.decimlas);const k={tick_lower_index:n.tick_lower_index,tick_upper_index:n.tick_upper_index,current_sqrt_price:n.object.current_sqrt_price,liquidity:a},m=l.getCoinAmountFromLiquidity({pool:{current_sqrt_price:n.object.current_sqrt_price,...n},position:k,roundUp:!1});console.log(m,"poolAmountInfo##");const P=new s(i).mul(new s(m==null?void 0:m.coinaAmount)).toString(),b=new s(e).mul(new s(m==null?void 0:m.coinbAmount)).toString(),q=f(P,_),B=f(b,A);console.log(m,"###poolAmountInfo"),console.log(d,"###myShare"),console.log(r,p,"##myPosition"),this.positionInfoObj[n.address]={...this.positionInfoObj[n.address],myAmountAUSD:u,myAmountBUSD:w,myLiquidityUSD:L,myShare:S,poolAmoutnA:q,poolAmoutnB:B},console.log(this.positionInfoObj,"###this.positionInfoObj")})},async updatePositionItem(o){var D,T;const l=v("Sui"),n=h("Sui"),i=this.positionInfoObj[o],e=await l.getLpBalance(i.lp_token_type),r=(await n.getTokenListByCoinType([i.lp_token_type]))[0];console.log(e,"###balance updatePositionItem");const p=i.autoPoolPositionInfo.tick_lower_index,_=i.autoPoolPositionInfo.tick_upper_index,A={tick_lower_index:p,tick_upper_index:_,current_sqrt_price:i.object.current_sqrt_price,liquidity:e},u=n.getCoinAmountFromLiquidity({pool:{current_sqrt_price:i.object.current_sqrt_price,...i},position:A,roundUp:!1});console.log(u,"amountInfo###");const w=u.coinaAmount,L=u.coinbAmount,{RATES:t}=this.getPoolStore,a=i.autoPoolPositionInfo.liquidity,d=2,y=2,S=((D=t[i.coinA.address])==null?void 0:D.price)||0,k=((T=t[i.coinB.address])==null?void 0:T.price)||0,m=new s(S).mul(new s(u==null?void 0:u.coinaAmount)).toString(),P=new s(k).mul(new s(u==null?void 0:u.coinbAmount)).toString(),b=f(m,d),q=f(P,y);let B=new s(0);Number(e)>0&&(B=new s(e).div(Math.pow(10,r.decimals)));const g=new s(B).mul(Math.pow(10,i.lpInfo.decimals)).div(new s(a)).mul(100).toNumber();let I;const U=new s(1).div(Math.pow(10,i.decimals)).toNumber();g>1?I=f(g,2):g>0&&g<U?I=`<${U}`:I=f(g,i.decimlas),this.positionInfoObj[i.address]={...i,tick_lower_index:p,tick_upper_index:_,current_sqrt_price:i.object.current_sqrt_price,myLiquidity:j(e,r.decimals),amountA:w,amountB:L,myShare:I,myAmountAUSD:b,myAmountBUSD:q}},async getAutoPoolAPY(){const{data:o}=await fetch(`${c.Sui.api}/v2/sui/auto_pools`).then(l=>l.json());o&&o.pools&&o.pools.length>0&&(this.apyObj=Object.fromEntries(o.pools.map((l,n)=>[l.clmm_pool,l])),console.log(o,"data##"))}}});export{v as a,Q as u};
