import{a8 as wo,C as So,V as qo,a9 as fo}from"./entry.f281c7bd.js";import{c as d,a as bo}from"./sha256.9ff4ccd8.js";import{I as ko,e as M,J as z,C as co,f as _o,s as g,u as Po,b as mo,a as no,T as uo,j as yo,p as lo}from"./pool.a52494cd.js";import{C as Bo,V as j}from"./index.6e18fbf8.js";import{D as t}from"./decimal.0e8aa3f1.js";function io(n){const l={launchpad:d[n||"Sui"].launchpad,ido:d[n||"Sui"].ido,xcetus:d[n||"Sui"].xcetus,xcetus_dividends:d[n||"Sui"].xcetus_dividends,cetus_faucet:d[n||"Sui"].cetus_faucet,xtoken:d[n||"Sui"].xtoken,xtoken_dividends:d[n||"Sui"].xtoken_dividends,token_faucet:d[n||"Sui"].token_faucet,booster:d[n||"Sui"].booster,maker_bonus:d[n||"Sui"].maker_bonus,liquidity_stratefy:d[n||"Sui"].liquidity_stratefy,vaults:d[n||"Sui"].vaults},_={fullRpcUrl:localStorage.getItem(`${n}-currentRpclocal2`)||d[n||"Sui"].fullRpcUrl,simulationAccount:d[n||"Sui"].simulationAccount,cetus_config:d[n||"Sui"].cetus_config,clmm_pool:d[n||"Sui"].clmm_pool,integrate:d[n||"Sui"].integrate,deepbook:d[n||"Sui"].deepbook,deepbook_endpoint_v2:d[n||"Sui"].deepbook_endpoint_v2,aggregatorUrl:d[n||"Sui"].aggregatorUrl},u=new ko(_),e=wo(new Bo(l,u)),p=bo(),D=So(()=>p);qo(()=>{D.value.address&&(u.senderAddress=D.value.address)});const Y=async()=>{console.log(e,"sdk###");const o=await e.Vaults.getVaultList();return o&&o.data||[]},v=async o=>await e.Vaults.getVault(o),i=async o=>{if(console.log(o,"###coinType"),u.senderAddress){const a=await e.ClmmSDK.fullClient.getBalance({owner:u.senderAddress,coinType:o});return a&&a.totalBalance}else return 0},c=o=>({transactionBlock:o,options:{showEffects:!0,showEvents:!0,showInput:!0,showRawInput:!0,showObjectChanges:!0,showBalanceChanges:!0}});return{getAutoPools:Y,getLpBalance:i,getVault:async o=>{const a=await e.Vaults.getVault(o);return console.log(a,"vault##292"),a},deposit:async o=>{const{lowerTick:a,upperTick:f,slippage:A,rewarder_coin_types:x,isOnlyA:k,isOnlyB:T,currentTickIndex:w}=o;console.log(o,"params###");const y=o.fix_amount_a;let m,h,s;if(k||T){const q=await e.Vaults.calculateDepositSwapAmount({lowerTick:a,upperTick:f,curSqrtPrice:o.curSqrtPrice,fix_amount_a:o.fix_amount_a,input_amount:o.coinAmount,coinTypeA:o.coinTypeA,coinTypeB:o.coinTypeB,clmm_pool:o.clmm_pool});console.log(q,"swapResut##211"),q?(m=new M(z(o.coinAmount).sub(q.swapInAmount).toString()),h=new M(q.afterSqrtPrice),s={swap_amount:q.swapInAmount,a2b:y}):(h=new M(o.curSqrtPrice),m=new M(o.coinAmount))}else h=o.curSqrtPrice,m=new M(o.coinAmount);let S,P,O;console.log(a,w,f,"####138"),w>=a&&w<=f?(S=co.estLiquidityAndcoinAmountFromOneAmounts(a,f,m,y,!0,A,h),P=y?m.toString():S.tokenMaxA.toString(),O=y?S.tokenMaxB.toString():m.toString()):w<a?(P=m.toNumber(),O=0):w>f&&(P=0,O=m.toNumber()),console.log({vault_id:o.id,clmm_pool:o.clmm_pool,lp_token_type:o.lp_token_type,amount_a:P,amount_b:O,fix_amount_a:y,slippage:A,coinTypeA:o.coinTypeA,coinTypeB:o.coinTypeB,rewarder_coin_types:[],swapParams:s},"params171");const Q=await e.Vaults.deposit({vault_id:o.id,clmm_pool:o.clmm_pool,lp_token_type:o.lp_token_type,amount_a:P,amount_b:O,fix_amount_a:y,slippage:A,coinTypeA:o.coinTypeA,coinTypeB:o.coinTypeB,rewarder_coin_types:[],swapParams:s});return c(Q)},remove:async o=>{const{lowerTick:a,upperTick:f,coinTypeA:A,coinTypeB:x,receiveAmount:k,clmm_pool:T,lowerSqrtPrice:w,upperSqrtPrice:y,fix_amount_a:m,curSqrtPrice:h,slippage:s,rewarder_coin_types:S,id:P,liquidity:O,swapParams:Q,isOnlyA:q,isOnlyB:I,sliderVal:U,positionInfo:J}=o;console.log(U,"sliderVal##");const L=await v(P),Z=await u.Pool.getPool(L.pool_id);let C,b,K,R,$,X,B;if(console.log(k,"##receiveAmount"),q||I){if(C=await e.Vaults.calculateRemoveSwapAmount({lowerTick:a,upperTick:f,curSqrtPrice:Z.current_sqrt_price,fix_amount_a:m,receive_amount:k,coinTypeA:A,coinTypeB:x,clmm_pool:T}),console.log(C,"swapResut###"),C){const H=j.get_share_liquidity_by_amount(L,J.balance);b=co.getCoinAmountFromLiquidity(new M(U==100?H:C.liquidity),new M(Z.current_sqrt_price),w,y,!1),K=j.get_protocol_fee_amount(L,b.coinA.toString()),R=j.get_protocol_fee_amount(L,b.coinB.toString()),$=U==100?J.balance:j.get_lp_amount_by_liquidity(L,C.liquidity),X=z(b.coinA.toString()).mul(z(1-o.slippage)),B=z(b.coinB.toString()).mul(z(1-o.slippage)),console.log(X.toString(),"##minAmountA"),console.log(B.toString(),"##minAmountA")}}else{const H=j.get_share_liquidity_by_amount(L,U==100?J.balance:$);b=co.getCoinAmountFromLiquidity(new M(H),h,w,y,!1),K=j.get_protocol_fee_amount(L,b.coinA.toString()),R=j.get_protocol_fee_amount(L,b.coinB.toString()),$=o.lpTokenAmount,X=z(b.coinA.toString()).mul(z(1-o.slippage)),B=z(b.coinB.toString()).mul(z(1-o.slippage)),console.log(K,R,"##protocol_fee_amount_b")}console.log($,"lpTokenAmount remove");const W={vault_id:o.id,clmm_pool:o.clmm_pool,lp_token_type:o.lp_token_type,coinTypeA:o.coinTypeA,coinTypeB:o.coinTypeB,lp_token_amount:$,min_amount_a:_o(X,0)||"",min_amount_b:_o(B,0)||"",rewarder_coin_types:[]};console.log(W,"##removeParams"),(q||I)&&(W.swapParams={a2b:!m,swap_amount:C==null?void 0:C.swapInAmount});const F=await e.Vaults.remove(W);return c(F)},getAutoPool:v,calculateDepositSwapAmount:async o=>{const{lowerTick:a,upperTick:f,curSqrtPrice:A,fix_amount_a:x,input_amount:k,coinTypeA:T,coinTypeB:w,clmm_pool:y,slippage:m,decimals:h}=o;console.log(o,"params###");const s=await e.Vaults.calculateDepositSwapAmount({lowerTick:a,upperTick:f,curSqrtPrice:A,fix_amount_a:x,input_amount:k,coinTypeA:T,coinTypeB:w,clmm_pool:y});if(console.log(s,"##swapResut"),s){const S=new t(s.swapOutAmount);return{...s,swapOutAmountLimit:g(S.sub(S.mul(m)).toNumber(),h)}}return s},calculateRemoveSwapAmount:async o=>{const{lowerTick:a,upperTick:f,curSqrtPrice:A,fix_amount_a:x,receiveAmount:k,coinTypeA:T,coinTypeB:w,clmm_pool:y,slippage:m,decimals:h}=o;console.log(o,"params###");const s=await e.Vaults.calculateRemoveSwapAmount({lowerTick:a,upperTick:f,curSqrtPrice:A,fix_amount_a:x,receive_amount:k,coinTypeA:T,coinTypeB:w,clmm_pool:y});if(console.log(s,"###swapResut calculateRemoveSwapAmount"),s){const S=new t(s.swapOutAmount);return{...s,swapOutAmountLimit:g(S.sub(S.mul(m)).toNumber(),h)}}return s}}}const Lo=fo("autoPool",{state:()=>({autoPoolList:[],autoPoolObj:{},positionInfoObj:{},positionInfoList:[],positionUSDObj:{},apyObj:{},currentAutoPoolStatus:"STATUS_RUNNING",slippage:localStorage.getItem("cetus-auto-slippage")||"0.1"}),getters:{getPoolStore(){return Po()}},actions:{async getAutoPoolList(){const l=await io("Sui").getAutoPools();console.log(l,"list###");const _=this.getPoolStore,u=l.map(e=>({..._.poolConfigObj[e.pool_id],id:e.id,lp_token_type:e.lp_token_type,autoPoolPositionInfo:e.positins[0],is_pause:e.is_pause,total_supply:e.total_supply,liquidity:e.liquidity,protocol_fee_rate:e.protocol_fee_rate,max_liquidity_quota:e.max_liquidity_quota}));this.autoPoolList=u,this.autoPoolObj=Object.fromEntries(u.map((e,p)=>[e.address,e])),this.getMyAutoPoolPosition(),console.log(u,"##autoPoolList")},async getMyAutoPoolPosition(){var p,D,Y;const n=io("Sui"),l=this.autoPoolList,_=mo("Sui"),u=[],{RATES:e}=this.getPoolStore;for(let v=0;v<l.length;v++){const i=l[v];console.log(i,"poolINfo###");const c=await _.getPool(i.address),r=await n.getLpBalance(l[v].lp_token_type);console.log(r,"balance##");const N=(await _.getTokenListByCoinType([l[v].lp_token_type]))[0];console.log(N,"lpInfo##");const G=((p=e[i.coinA.address])==null?void 0:p.price)||"",E=((D=e[i.coinB.address])==null?void 0:D.price)||"",V=i.autoPoolPositionInfo.tick_lower_index,o=i.autoPoolPositionInfo.tick_upper_index,a={tick_lower_index:V,tick_upper_index:o,current_sqrt_price:c==null?void 0:c.current_sqrt_price,liquidity:Number(r)>0?j.get_share_liquidity_by_amount({liquidity:i==null?void 0:i.liquidity,total_supply:i==null?void 0:i.total_supply},r):0},f=await _.getCoinAmountFromLiquidity({pool:{...i,current_sqrt_price:c==null?void 0:c.current_sqrt_price},position:a,roundUp:!1});console.log(f,"##amountInfo");const A=f.coinaAmount,x=f.coinbAmount,k=A,T=x,w=i.coinA.decimals,y=i.coinB.decimals,m=_.TickMath.tickIndexToPrice(Number(V),w,y).toString(),h=_.TickMath.tickIndexToPrice(Number(o),w,y).toString(),s=new t(G).mul(new t(A)).toNumber(),S=new t(E).mul(new t(x)).toNumber(),P=s>0&&s<.01?"<$0.01":`$${no(g(s,2))}`,O=S>0&&S<.01?"<$0.01":`$${no(g(S,2))}`,Q=uo.sqrtPriceX64ToPrice(c.current_sqrt_price,w,y),q=await _.getCoinAmountFromLiquidity({pool:{...i,tick_lower_index:V,tick_upper_index:o,current_sqrt_price:c==null?void 0:c.current_sqrt_price},position:{...a,liquidity:i.liquidity},roundUp:!1}),I=new t(q.coinaAmount).toNumber(),U=new t(q.coinbAmount).toNumber();console.log(I,U,Q.toString(),"###116");const J=g(new t(I).mul(new t(G)).toNumber(),2),L=g(new t(U).mul(new t(E)).toNumber(),2);console.log(c,"newPool##"),console.log(I,U,"###131");const{ratioA:Z,ratioB:C}=j.calculateDepositRatio(V,o,new M.BN(c==null?void 0:c.current_sqrt_price));console.log(Z.toString(),C.toString(),"###139");const b=Number(g(Z.toString(),2))*100,K=100-b;console.log(I,U,b,K,"###147");let R=0;Number(r)>0&&(R=new t(r).div(Math.pow(10,N.decimals)));const $=G&&E?g(new t(s).add(new t(S)).toString(),2):"--",X=i.total_supply;let B=0;R>0&&X>0&&(B=new t(R).mul(Math.pow(10,N.decimals)).div(new t(X)).mul(100).toNumber()),console.log(B,"##myShare");const W=new t(1).div(Math.pow(10,i.decimals)).toNumber();let F=0;if(B>1)F=g(B,2);else if(B>0&&B<W)F=`<${W}`;else if(B==0)F=0;else{const po=yo(B),Ao=po==-1?2:po+2;F=g(B,Ao)}console.log(r,R.toString(),"###balance");const H={tick_lower_index:V,tick_upper_index:o,current_sqrt_price:c==null?void 0:c.current_sqrt_price,liquidity:i.max_liquidity_quota},oo=await _.getCoinAmountFromLiquidity({pool:{...i,current_sqrt_price:c==null?void 0:c.current_sqrt_price},position:H,roundUp:!1}),to=new t(G).mul(new t(oo.coinaAmount)),eo=new t(E).mul(new t(oo.coinbAmount)),so=new t(G).mul(new t(q.coinaAmount)),go=new t(E).mul(new t(q.coinbAmount)),ro=to.add(eo).toNumber(),ao=so.add(go).toNumber();this.positionInfoObj[i.id]={tick_lower_index:V,tick_upper_index:o,current_sqrt_price:c.current_sqrt_price,myLiquidity:lo(r,N.decimals),amountA:k,amountB:T,...i,lpInfo:N,myAmountAUSD:P,myAmountBUSD:O,myLiquidityUSD:$,myShare:F,minPrice:m,maxPrice:h,poolCoinARatio:b,poolCoinBRatio:K,poolCoinANum:I,poolCoinBNum:U,poolCoinAUSD:J,poolCoinBUSD:L,quoteUSD:ro,poolUSD:ao,balance:r},u.push({tick_lower_index:V,tick_upper_index:o,current_sqrt_price:(Y=i==null?void 0:i.object)==null?void 0:Y.current_sqrt_price,myLiquidity:lo(r,N.decimals),amountA:k,amountB:T,...i,lpInfo:N,myAmountAUSD:P,myAmountBUSD:O,myLiquidityUSD:$,myShare:F,minPrice:m,maxPrice:h,poolCoinARatio:b,poolCoinBRatio:K,poolCoinANum:I,poolCoinBNum:U,poolCoinAUSD:J,poolCoinBUSD:L,quoteUSD:ro,poolUSD:ao,balance:r})}this.positionInfoList=u,console.log(this.positionInfoObj,"this.positionInfoObj###"),console.log(this.positionInfoList,"###this.positionInfoList")},async updatePositionItem(n){var oo,to;const l=io("Sui"),_=mo("Sui"),u=await l.getAutoPool(n),e=await _.getPool(u.pool_id);console.log("newPoolInfo:",u),console.log("newPool:",e),console.log("this.positionInfoObj[id]:",this.positionInfoObj[n]);const p={...this.positionInfoObj[n],autoPoolPositionInfo:u.positins[0]},D=await l.getLpBalance(p.lp_token_type),Y=(await _.getTokenListByCoinType([p.lp_token_type]))[0];console.log(D,"###balance updatePositionItem");const v=p.autoPoolPositionInfo.tick_lower_index,i=p.autoPoolPositionInfo.tick_upper_index,c={tick_lower_index:v,tick_upper_index:i,current_sqrt_price:e.current_sqrt_price,liquidity:j.get_share_liquidity_by_amount({liquidity:u==null?void 0:u.liquidity,total_supply:u==null?void 0:u.total_supply},D)},r=_.getCoinAmountFromLiquidity({pool:{current_sqrt_price:e.current_sqrt_price,...p},position:c,roundUp:!1});console.log(r,"amountInfo###"),r.coinaAmount,r.coinbAmount;const N=r.coinaAmount,G=r.coinbAmount,{RATES:E}=this.getPoolStore,V=u.total_supply,o=uo.sqrtPriceX64ToPrice(e.current_sqrt_price,p.coinA.decimals,p.coinB.decimals),a=2,f=2,A=((oo=E[p.coinA.address])==null?void 0:oo.price)||0,x=((to=E[p.coinB.address])==null?void 0:to.price)||0,k=new t(A).mul(new t(r==null?void 0:r.coinaAmount)).toNumber(),T=new t(x).mul(new t(r==null?void 0:r.coinbAmount)).toNumber(),w=k>0&&k<.01?"<$0.01":`$${no(g(k,2))}`,y=T>0&&T<.01?"<$0.01":`$${no(g(T,2))}`;let m=new t(0);Number(D)>0&&(m=new t(D).div(Math.pow(10,Y.decimals)));const h=A&&x?g(new t(k).add(new t(T)).toString(),2):"--",s=new t(m).mul(Math.pow(10,p.lpInfo.decimals)).div(new t(V)).mul(100).toNumber();console.log(s,"##myShare");const S=new t(1).div(Math.pow(10,p.decimals)).toNumber();let P=0;if(s>1)P=g(s,2);else if(s>0&&s<S)P=`<${S}`;else if(s==0)P=0;else{const eo=yo(s),so=eo==-1?2:eo+2;P=g(s,so)}const O=uo.sqrtPriceX64ToPrice(e.current_sqrt_price,a,f),Q=await _.getCoinAmountFromLiquidity({pool:{...p,tick_lower_index:v,tick_upper_index:i,current_sqrt_price:e==null?void 0:e.current_sqrt_price},position:{...c,liquidity:u.liquidity},roundUp:!1}),q=new t(Q.coinaAmount).toNumber(),I=new t(Q.coinbAmount).toNumber();console.log(q,I,O.toString(),"###116");const U=g(new t(q).mul(new t(A)).toNumber(),2),J=g(new t(I).mul(new t(x)).toNumber(),2);console.log(e,"newPool##"),console.log(q,I,"###poolCoinBNum");const{ratioA:L,ratioB:Z}=j.calculateDepositRatio(v,i,new M.BN(e==null?void 0:e.current_sqrt_price));console.log(L.toString(),Z.toString(),"###139");const C=Number(g(L.toString(),2))*100,b=100-C,K={tick_lower_index:v,tick_upper_index:i,current_sqrt_price:e==null?void 0:e.current_sqrt_price,liquidity:p.max_liquidity_quota},R=await _.getCoinAmountFromLiquidity({pool:{...p,current_sqrt_price:e==null?void 0:e.current_sqrt_price},position:K,roundUp:!1}),$=new t(A).mul(new t(R.coinaAmount)),X=new t(x).mul(new t(R.coinbAmount)),B=new t(A).mul(new t(Q.coinaAmount)),W=new t(x).mul(new t(Q.coinbAmount)),F=$.add(X).toNumber(),H=B.add(W).toNumber();this.positionInfoObj[n]={...p,tick_lower_index:v,tick_upper_index:i,current_sqrt_price:e.current_sqrt_price,myLiquidity:lo(D,Y.decimals),amountA:N,amountB:G,myShare:P,myAmountAUSD:w,myAmountBUSD:y,myLiquidityUSD:h,poolCoinARatio:C,poolCoinBRatio:b,poolCoinANum:q,poolCoinBNum:I,poolCoinAUSD:U,poolCoinBUSD:J,quoteUSD:F,poolUSD:H,balance:D,price:o},console.log(this.positionInfoObj[n],"###this.positionInfoObj[id]")},async getAutoPoolAPY(){try{const{data:n}=await fetch(`${d.Sui.api}/v2/sui/auto_pools`).then(l=>l.json());n&&n.pools&&n.pools.length>0&&(this.apyObj=Object.fromEntries(n.pools.map((l,_)=>[l.object_id,{...l,apr:l.apr.replace("%","")>0&&l.apr.replace("%","")<.01?"<0.01%":g(l.apr.replace("%",""),2)+"%",resultApr:l.apr.replace("%","")}])),console.log(this.apyObj,"data##"))}catch{this.apyObj={}}},async getVault(n){const l=io("Sui"),{status:_}=await l.getVault(n);this.currentAutoPoolStatus=_,this.updatePositionItem(n),console.log(_,"status##")},setSlippage(n){console.log(n,"slippage##"),this.slippage=n,localStorage.setItem("cetus-auto-slippage",n)}}});export{io as a,Lo as u};
