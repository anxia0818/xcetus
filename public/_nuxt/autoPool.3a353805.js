import{a8 as So,C as bo,V as fo,a9 as qo}from"./entry.04e399e7.js";import{c as y,a as ko}from"./sha256.529f5ef7.js";import{M as Po,N as yo,b as O,O as G,T as lo,C as so,f as mo,s as q,u as To,e as _o,a as co,h as go,p as io}from"./pool.387f7919.js";import{C as Bo,V as W}from"./index.7ac8f33e.js";import{D as t}from"./decimal.0bdeb344.js";function uo(n){const m={launchpad:y[n||"Sui"].launchpad,ido:y[n||"Sui"].ido,xcetus:y[n||"Sui"].xcetus,xcetus_dividends:y[n||"Sui"].xcetus_dividends,cetus_faucet:y[n||"Sui"].cetus_faucet,xtoken:y[n||"Sui"].xtoken,xtoken_dividends:y[n||"Sui"].xtoken_dividends,token_faucet:y[n||"Sui"].token_faucet,booster:y[n||"Sui"].booster,maker_bonus:y[n||"Sui"].maker_bonus,liquidity_stratefy:y[n||"Sui"].liquidity_stratefy,vaults:y[n||"Sui"].vaults},_={fullRpcUrl:localStorage.getItem(`${n}-currentRpclocal2`)||y[n||"Sui"].fullRpcUrl,simulationAccount:y[n||"Sui"].simulationAccount,cetus_config:y[n||"Sui"].cetus_config,clmm_pool:y[n||"Sui"].clmm_pool,integrate:y[n||"Sui"].integrate,deepbook:y[n||"Sui"].deepbook,deepbook_endpoint_v2:y[n||"Sui"].deepbook_endpoint_v2,aggregatorUrl:y[n||"Sui"].aggregatorUrl},u=new Po(_),e=So(new Bo(m,u)),r=ko(),N=bo(()=>r);fo(()=>{N.value.address&&(u.senderAddress=N.value.address)});const Z=async()=>{console.log(e,"sdk###");const o=await e.Vaults.getVaultList();return o&&o.data||[]},L=async o=>{const c=await e.Vaults.getVault(o);return console.log(c,"vault##"),{...c,quota_based_type:yo(c.quota_based_type).full_address}},i=async o=>{if(console.log(o,"###coinType"),u.senderAddress){const c=await e.ClmmSDK.fullClient.getBalance({owner:u.senderAddress,coinType:o});return c&&c.totalBalance}else return 0},d=o=>({transactionBlock:o,options:{showEffects:!0,showEvents:!0,showInput:!0,showRawInput:!0,showObjectChanges:!0,showBalanceChanges:!0}});return{getAutoPools:Z,getLpBalance:i,getVault:async o=>{const c=await e.Vaults.getVault(o);return console.log(c,"vault##292"),c},deposit:async o=>{const{lowerTick:c,upperTick:A,slippage:b,rewarder_coin_types:h,isOnlyA:k,isOnlyB:T,currentTickIndex:P,decimal_b:v}=o;console.log(o,"params###");let a=o.fix_amount_a,w,s,S,I=P;if(k||T){const l=await e.Vaults.calculateDepositSwapAmount({lowerTick:c,upperTick:A,curSqrtPrice:o.curSqrtPrice,fix_amount_a:o.fix_amount_a,input_amount:o.coinAmount,coinTypeA:o.coinTypeA,coinTypeB:o.coinTypeB,clmm_pool:o.clmm_pool,use_route:!0,priceSplitPoint:b},!0);console.log(l,"swapResut##211"),l?(s=new O(l.afterSqrtPrice),w=l.fixAmountA===a?new O(G(o.coinAmount).sub(l.swapInAmount).toString()):new O(l.swapOutAmount),S={swap_amount:l.swapInAmount,a2b:a,input_amount:o.coinAmount,route_obj:l.routeObj},a=l.fixAmountA,I=lo.sqrtPriceX64ToTickIndex(new O(l.afterSqrtPrice))):(s=new O(o.curSqrtPrice),w=new O(o.coinAmount))}else s=o.curSqrtPrice,w=new O(o.coinAmount);let X,f,p;console.log(c,P,A,"####138"),I>=c&&I<=A?(X=so.estLiquidityAndcoinAmountFromOneAmounts(c,A,w,a,!0,b,s),f=a?w.toString():X.tokenMaxA.toString(),p=a?X.tokenMaxB.toString():w.toString()):I<c?(f=w.toNumber(),p=0):I>A&&(f=0,p=w.toNumber()),console.log({vault_id:o.id,clmm_pool:o.clmm_pool,lp_token_type:o.lp_token_type,amount_a:f,amount_b:p,fix_amount_a:a,slippage:b,coinTypeA:o.coinTypeA,coinTypeB:o.coinTypeB,rewarder_coin_types:[],swapParams:S},"params171");const C=await e.Vaults.deposit({lowerTick:c,upperTick:A,vault_id:o.id,clmm_pool:o.clmm_pool,lp_token_type:o.lp_token_type,amount_a:f,amount_b:p,fix_amount_a:a,slippage:b,coinTypeA:o.coinTypeA,coinTypeB:o.coinTypeB,swapParams:S});return d(C)},remove:async o=>{const{lowerTick:c,upperTick:A,coinTypeA:b,coinTypeB:h,receiveAmount:k,clmm_pool:T,lowerSqrtPrice:P,upperSqrtPrice:v,fix_amount_a:a,curSqrtPrice:w,slippage:s,rewarder_coin_types:S,id:I,liquidity:X,swapParams:f,isOnlyA:p,isOnlyB:C,sliderVal:l,positionInfo:$}=o;console.log(l,"sliderVal##");const U=await L(I),H=await u.Pool.getPool(U.pool_id);let D,B,R,M,F,K,x;const E=W.get_share_liquidity_by_amount(U,l==100?$.balance:o.lpTokenAmount);if(console.log(k,"##receiveAmount"),p||C){if(D=await e.Vaults.calculateRemoveSwapAmount({lowerTick:c,upperTick:A,curSqrtPrice:H.current_sqrt_price,fix_amount_a:a,receive_amount:k,coinTypeA:b,coinTypeB:h,clmm_pool:T,use_route:!0,priceSplitPoint:s,liquidity:l==100?E:""}),console.log(D,"swapResut###"),D){const J=W.get_share_liquidity_by_amount(U,$.balance);B=so.getCoinAmountFromLiquidity(new O(l==100?J:D.liquidity),new O(H.current_sqrt_price),P,v,!1),R=W.get_protocol_fee_amount(U,B.coinA.toString()),M=W.get_protocol_fee_amount(U,B.coinB.toString()),F=l==100?$.balance:W.get_lp_amount_by_liquidity(U,D.liquidity),K=G(B.coinA.toString()).mul(G(1-o.slippage)),x=G(B.coinB.toString()).mul(G(1-o.slippage)),console.log(K.toString(),"##minAmountA"),console.log(x.toString(),"##minAmountA")}}else console.log(E,"#removeLiquidity"),B=so.getCoinAmountFromLiquidity(new O(E),w,P,v,!1),B=so.getCoinAmountFromLiquidity(new O(E),w,P,v,!1),console.log(B,"#coinAmountscoinAmounts"),F=o.lpTokenAmount,K=G(B.coinA.toString()).mul(G(1-o.slippage)),x=G(B.coinB.toString()).mul(G(1-o.slippage)),console.log(R,M,"##protocol_fee_amount_b"),console.log(K.toString(),"##minAmountA"),console.log(x.toString(),"##minAmountA"),console.log(o,"params###246");console.log(F,"lpTokenAmount remove");const j={vault_id:o.id,clmm_pool:o.clmm_pool,lp_token_type:o.lp_token_type,coinTypeA:o.coinTypeA,coinTypeB:o.coinTypeB,lp_token_amount:F,min_amount_a:mo(K,0)||"",min_amount_b:mo(x,0)||"",rewarder_coin_types:[],slippage:o.slippage};console.log(j,"##removeParams"),(p||C)&&(j.swapParams={a2b:!a,swap_amount:D==null?void 0:D.swapInAmount,route_obj:D.routeObj});const z=await e.Vaults.remove(j);return d(z)},getAutoPool:L,calculateDepositSwapAmount:async o=>{const{lowerTick:c,upperTick:A,curSqrtPrice:b,fix_amount_a:h,input_amount:k,coinTypeA:T,coinTypeB:P,clmm_pool:v,slippage:a,decimals:w}=o;console.log(o,"params###");let s;try{s=await e.Vaults.calculateDepositSwapAmount({lowerTick:c,upperTick:A,curSqrtPrice:b,fix_amount_a:h,input_amount:k,coinTypeA:T,coinTypeB:P,clmm_pool:v,use_route:!0,priceSplitPoint:a},!0)}catch{s=await e.Vaults.calculateDepositSwapAmount({lowerTick:c,upperTick:A,curSqrtPrice:b,fix_amount_a:h,input_amount:k,coinTypeA:T,coinTypeB:P,clmm_pool:v,use_route:!1,priceSplitPoint:a},!0)}if(console.log(s,"##swapResut"),s){const S=new t(s.swapOutAmount);return{...s,swapOutAmountLimit:q(S.sub(S.mul(a)).toNumber(),w)}}return s},calculateRemoveSwapAmount:async o=>{const{lowerTick:c,upperTick:A,curSqrtPrice:b,fix_amount_a:h,receiveAmount:k,coinTypeA:T,coinTypeB:P,clmm_pool:v,slippage:a,decimals:w}=o;console.log(o,"params###");let s;try{s=await e.Vaults.calculateRemoveSwapAmount({lowerTick:c,upperTick:A,curSqrtPrice:b,fix_amount_a:h,receive_amount:k,coinTypeA:T,coinTypeB:P,clmm_pool:v,use_route:!0,priceSplitPoint:a})}catch{s=await e.Vaults.calculateRemoveSwapAmount({lowerTick:c,upperTick:A,curSqrtPrice:b,fix_amount_a:h,receive_amount:k,coinTypeA:T,coinTypeB:P,clmm_pool:v,use_route:!1,priceSplitPoint:a})}if(console.log(s,"###swapResut calculateRemoveSwapAmount"),s){const S=new t(s.swapOutAmount);return{...s,swapOutAmountLimit:q(S.sub(S.mul(a)).toNumber(),w)}}return s}}}const Do=qo("autoPool",{state:()=>({autoPoolList:[],autoPoolObj:{},positionInfoObj:{},positionInfoList:[],positionUSDObj:{},apyObj:{},currentAutoPoolStatus:"STATUS_RUNNING",slippage:localStorage.getItem("cetus-auto-slippage")||"0.1"}),getters:{getPoolStore(){return To()}},actions:{async getAutoPoolList(){const m=await uo("Sui").getAutoPools();console.log(m,"list###");const _=this.getPoolStore,u=m.map(e=>({..._.poolConfigObj[e.pool_id],id:e.id,lp_token_type:e.lp_token_type,autoPoolPositionInfo:e.positins[0],is_pause:e.is_pause,total_supply:e.total_supply,liquidity:e.liquidity,protocol_fee_rate:e.protocol_fee_rate,max_quota:e.max_quota,quota_based_type:yo(e.quota_based_type).full_address}));this.autoPoolList=u,this.autoPoolObj=Object.fromEntries(u.map((e,r)=>[e.address,e])),this.getMyAutoPoolPosition(),console.log(u,"##autoPoolList")},async getMyAutoPoolPosition(){var r,N,Z;const n=uo("Sui"),m=this.autoPoolList,_=_o("Sui"),u=[],{RATES:e}=this.getPoolStore;for(let L=0;L<m.length;L++){const i=m[L];console.log(i,"poolINfo###");const d=await _.getPool(i.address),g=await n.getLpBalance(m[L].lp_token_type);console.log(g,"balance##");const V=(await _.getTokenListByCoinType([m[L].lp_token_type]))[0];console.log(V,"lpInfo##");const oo=((r=e[i.coinA.address])==null?void 0:r.price)||"",Y=((N=e[i.coinB.address])==null?void 0:N.price)||"",Q=i.autoPoolPositionInfo.tick_lower_index,o=i.autoPoolPositionInfo.tick_upper_index,c={tick_lower_index:Q,tick_upper_index:o,current_sqrt_price:d==null?void 0:d.current_sqrt_price,liquidity:Number(g)>0?W.get_share_liquidity_by_amount({liquidity:i==null?void 0:i.liquidity,total_supply:i==null?void 0:i.total_supply},g):0},A=await _.getCoinAmountFromLiquidity({pool:{...i,current_sqrt_price:d==null?void 0:d.current_sqrt_price},position:c,roundUp:!1});console.log(A,"##amountInfo");const b=A.coinaAmount,h=A.coinbAmount,k=b,T=h,P=i.coinA.decimals,v=i.coinB.decimals,a=_.TickMath.tickIndexToPrice(Number(Q),P,v).toString(),w=_.TickMath.tickIndexToPrice(Number(o),P,v).toString(),s=new t(oo).mul(new t(b)).toNumber(),S=new t(Y).mul(new t(h)).toNumber(),I=s>0&&s<.01?"<$0.01":`$${co(q(s,2))}`,X=S>0&&S<.01?"<$0.01":`$${co(q(S,2))}`,f=lo.sqrtPriceX64ToPrice(d.current_sqrt_price,P,v),p=await _.getCoinAmountFromLiquidity({pool:{...i,tick_lower_index:Q,tick_upper_index:o,current_sqrt_price:d==null?void 0:d.current_sqrt_price},position:{...c,liquidity:i.liquidity},roundUp:!1}),C=new t(p.coinaAmount).toNumber(),l=new t(p.coinbAmount).toNumber();console.log(C,l,f.toString(),"###116");const $=q(new t(C).mul(new t(oo)).toNumber(),2),U=q(new t(l).mul(new t(Y)).toNumber(),2);console.log(d,"newPool##"),console.log(C,l,"###131");const{ratioA:H,ratioB:D}=W.calculateDepositRatio(Q,o,new O.BN(d==null?void 0:d.current_sqrt_price));console.log(H.toString(),D.toString(),"###139");const B=Number(q(H.toString(),2))*100,R=100-B;console.log(C,l,B,R,"###147");let M=0;Number(g)>0&&(M=new t(g).div(Math.pow(10,V.decimals)));const F=oo&&Y?q(new t(s).add(new t(S)).toString(),2):"--",K=i.total_supply;let x=0;M>0&&K>0&&(x=new t(M).mul(Math.pow(10,V.decimals)).div(new t(K)).mul(100).toNumber()),console.log(x,"##myShare");const E=new t(1).div(Math.pow(10,i.decimals)).toNumber();let j=0;if(x>1)j=q(x,2);else if(x>0&&x<E)j=`<${E}`;else if(x==0)j=0;else{const po=go(x),wo=po==-1?2:po+2;j=q(x,wo)}console.log(g,M.toString(),"###balance");const z=(await _.getTokenListByCoinType([i.quota_based_type]))[0],J=io(i.max_quota,z.decimals);console.log(i.quota_based_type,z,J,"##quoteCoinInfo");const to=z.address==i.coin_b_address,eo=to?new t(p.coinaAmount).mul(i.price).add(p.coinbAmount):new t(p.coinaAmount).mul(1/i.price).add(p.coinbAmount),no=eo.toNumber();console.log(to,no,"#isQuotaCoin");const ro=J,Ao=to?new t(p.coinaAmount).mul(i.price).add(p.coinbAmount):new t(p.coinaAmount).mul(1/i.price).add(p.coinbAmount),ao=new t(ro).sub(Ao).mul(Y).toNumber();console.log(ao,"remainingTokenUSD##"),console.log(eo.toNumber(),"#poolTokenNum"),this.positionInfoObj[i.id]={tick_lower_index:Q,tick_upper_index:o,current_sqrt_price:d.current_sqrt_price,myLiquidity:io(g,V.decimals),amountA:k,amountB:T,...i,lpInfo:V,myAmountAUSD:I,myAmountBUSD:X,myLiquidityUSD:F,myShare:j,minPrice:a,maxPrice:w,poolCoinARatio:B,poolCoinBRatio:R,poolCoinANum:C,poolCoinBNum:l,poolCoinAUSD:$,poolCoinBUSD:U,quoteUSD:ro,poolUSD:Number($)+Number(U),balance:g,quoteCoinInfo:z,remainingTokenUSD:ao,currentDeposit:no},u.push({tick_lower_index:Q,tick_upper_index:o,current_sqrt_price:(Z=i==null?void 0:i.object)==null?void 0:Z.current_sqrt_price,myLiquidity:io(g,V.decimals),amountA:k,amountB:T,...i,lpInfo:V,myAmountAUSD:I,myAmountBUSD:X,myLiquidityUSD:F,myShare:j,minPrice:a,maxPrice:w,poolCoinARatio:B,poolCoinBRatio:R,poolCoinANum:C,poolCoinBNum:l,poolCoinAUSD:$,poolCoinBUSD:U,quoteUSD:ro,poolUSD:no,balance:g})}this.positionInfoList=u,console.log(this.positionInfoObj,"this.positionInfoObj###"),console.log(this.positionInfoList,"###this.positionInfoList")},async updatePositionItem(n){var J,to;const m=uo("Sui"),_=_o("Sui"),u=await m.getAutoPool(n),e=await _.getPool(u.pool_id);console.log("newPoolInfo:",u),console.log("newPool:",e),console.log("this.positionInfoObj[id]:",this.positionInfoObj[n]);const r={...this.positionInfoObj[n],autoPoolPositionInfo:u.positins[0]},N=await m.getLpBalance(r.lp_token_type),Z=(await _.getTokenListByCoinType([r.lp_token_type]))[0];console.log(N,"###balance updatePositionItem");const L=r.autoPoolPositionInfo.tick_lower_index,i=r.autoPoolPositionInfo.tick_upper_index,d={tick_lower_index:L,tick_upper_index:i,current_sqrt_price:e.current_sqrt_price,liquidity:W.get_share_liquidity_by_amount({liquidity:u==null?void 0:u.liquidity,total_supply:u==null?void 0:u.total_supply},N)},g=_.getCoinAmountFromLiquidity({pool:{current_sqrt_price:e.current_sqrt_price,...r},position:d,roundUp:!1});console.log(g,"amountInfo###");const V=g.coinaAmount,oo=g.coinbAmount,{RATES:Y}=this.getPoolStore,Q=u.total_supply,o=lo.sqrtPriceX64ToPrice(e.current_sqrt_price,r.coinA.decimals,r.coinB.decimals),c=2,A=2,b=((J=Y[r.coinA.address])==null?void 0:J.price)||0,h=((to=Y[r.coinB.address])==null?void 0:to.price)||0,k=new t(b).mul(new t(g==null?void 0:g.coinaAmount)).toNumber(),T=new t(h).mul(new t(g==null?void 0:g.coinbAmount)).toNumber(),P=k>0&&k<.01?"<$0.01":`$${co(q(k,2))}`,v=T>0&&T<.01?"<$0.01":`$${co(q(T,2))}`;let a=new t(0);Number(N)>0&&(a=new t(N).div(Math.pow(10,Z.decimals)));const w=b&&h?q(new t(k).add(new t(T)).toString(),2):"--",s=new t(a).mul(Math.pow(10,r.lpInfo.decimals)).div(new t(Q)).mul(100).toNumber();console.log(s,"##myShare");const S=new t(1).div(Math.pow(10,r.decimals)).toNumber();let I=0;if(s>1)I=q(s,2);else if(s>0&&s<S)I=`<${S}`;else if(s==0)I=0;else{const eo=go(s),no=eo==-1?2:eo+2;I=q(s,no)}const X=lo.sqrtPriceX64ToPrice(e.current_sqrt_price,c,A),f=await _.getCoinAmountFromLiquidity({pool:{...r,tick_lower_index:L,tick_upper_index:i,current_sqrt_price:e==null?void 0:e.current_sqrt_price},position:{...d,liquidity:u.liquidity},roundUp:!1}),p=new t(f.coinaAmount).toNumber(),C=new t(f.coinbAmount).toNumber();console.log(p,C,X.toString(),"###116");const l=q(new t(p).mul(new t(b)).toNumber(),2),$=q(new t(C).mul(new t(h)).toNumber(),2);console.log(e,"newPool##"),console.log(p,C,"###poolCoinBNum");const{ratioA:U,ratioB:H}=W.calculateDepositRatio(L,i,new O.BN(e==null?void 0:e.current_sqrt_price));console.log(U.toString(),H.toString(),"###139");const D=Number(q(U.toString(),2))*100,B=100-D,R=(await _.getTokenListByCoinType([u.quota_based_type]))[0],M=io(u.max_quota,R.decimals);console.log(u.quota_based_type,R,M,"##quoteCoinInfo");const F=R.address==r.coin_b_address,x=(F?new t(f.coinaAmount).mul(r.price).add(f.coinbAmount):new t(f.coinaAmount).mul(1/r.price).add(f.coinbAmount)).toNumber(),E=M,j=F?new t(f.coinaAmount).mul(r.price).add(f.coinbAmount):new t(f.coinaAmount).mul(1/r.price).add(f.coinbAmount),z=new t(E).sub(j).mul(h).toNumber();console.log(z,"remainingTokenUSD##"),this.positionInfoObj[n]={...r,tick_lower_index:L,tick_upper_index:i,current_sqrt_price:e.current_sqrt_price,myLiquidity:io(N,Z.decimals),amountA:V,amountB:oo,myShare:I,myAmountAUSD:P,myAmountBUSD:v,myLiquidityUSD:w,poolCoinARatio:D,poolCoinBRatio:B,poolCoinANum:p,poolCoinBNum:C,poolCoinAUSD:l,poolCoinBUSD:$,quoteUSD:E,poolUSD:Number(l)+Number($),balance:N,price:o,quoteCoinInfo:R,remainingTokenUSD:z,currentDeposit:x},console.log(this.positionInfoObj[n],"###this.positionInfoObj[id]")},async getAutoPoolAPY(){try{const{data:n}=await fetch(`${y.Sui.api}/v2/sui/auto_pools`).then(m=>m.json());n&&n.pools&&n.pools.length>0&&(this.apyObj=Object.fromEntries(n.pools.map((m,_)=>[m.object_id,{...m,apr:m.apr.replace("%","")>0&&m.apr.replace("%","")<.01?"<0.01%":q(m.apr.replace("%",""),2)+"%",resultApr:m.apr.replace("%","")}])),console.log(this.apyObj,"data##"))}catch{this.apyObj={}}},async getVault(n){const m=uo("Sui"),{status:_}=await m.getVault(n);this.currentAutoPoolStatus=_,this.updatePositionItem(n),console.log(_,"status##")},setSlippage(n){console.log(n,"slippage##"),this.slippage=n,localStorage.setItem("cetus-auto-slippage",n)}}});export{uo as a,Do as u};
