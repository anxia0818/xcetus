import{p as d,e as f,s as w,as as p}from"./pool.ab838848.js";import{u as g}from"./useWhale.a2c72f46.js";import{a9 as C}from"./entry.7f4d6977.js";import{c as v}from"./sha256.481cb5dd.js";import{D as u}from"./decimal.0bdeb344.js";const x=C("xcetus",{state:()=>({venft_id:"",xWhaleBalance:"--",venftInfo:{},pendingAmount:"--",newPendingAmount:"--",whaleBalance:"--",ownerLocks:[],availableXwhale:"--",redeemingXwhale:"--",nextStartTime:"",xcetusShare:"--",pendingCoinInfo:{},newPendingCoinInfo:{},cetusApr:"",claimLoading:"",dividendManagerInfo:{},rewardCoin:{},rewardCoinAmount:"--"}),actions:{async getOwnerVeNFT(t){const i=g("Sui");try{const e=await i.getOwnerVeNFT(t);console.log(e,"===>result"),e?(this.venft_id=e.id,this.xWhaleBalance=d(e.xcetus_balance,9),this.venftInfo={id:e.id,type:e.type,index:e.index,xcetus_balance:e.xcetus_balance},console.log("执行37"),this.getVeNFTDividendInfo()):(this.xWhaleBalance="0",this.availableXwhale="0",this.redeemingXwhale="0",this.pendingAmount="0",this.newPendingAmount="0")}catch{this.xWhaleBalance="--",this.availableXwhale="--",this.redeemingXwhale="--",this.pendingAmount="--",this.newPendingAmount="--"}},async getVeNFTDividendInfo(){const t=g("Sui"),i=f("Sui");try{const e=await t.getVeNFTDividendInfo(this.venft_id,this.dividendManagerInfo),l=await t.getPeriod(this.dividendManagerInfo),r=await i.getTokenList();console.log(l,"===>period"),console.log(e,"===>result");const c=[];if(e&&e.rewards&&e.rewards.length>0){for(let o=0;o<e.rewards.length;o++)if(e.rewards[o].period<l){const n=e.rewards[o].rewards;for(let s=0;s<n.length;s++){const a=n[s];Number(a.amount)>0&&c.push({...a})}}if(c&&c.length>0){const o={};for(let s=0;s<c.length;s++){const a=c[s];if(o[a.coin_type])o[a.coin_type].amount=new u(o[a.coin_type].amount).add(new u(a.amount)).toString();else{let h=r.filter(m=>m.address==a.coin_type)[0];h||(h=(await i.getTokenListByCoinType([a.coin_type]))[0]),o[a.coin_type]={...a,...h}}}const n=Object.values(o);console.log(n,"===>rewardArr"),this.pendingCoinInfo=n[0],this.pendingAmount=w(d(n[0].amount,n[0].decimals),6),this.newPendingCoinInfo=n&&n.length>1?n[1]:{},this.newPendingAmount=n&&n.length>1?w(d(n[1].amount,n[1].decimals),6):0,this.rewardCoin=n&&n.length>2?n[2]:{},this.rewardCoinAmount=n&&n.length>2?w(d(n[2].amount,n[2].decimals),6):0,console.log(this.pendingCoinInfo,this.newPendingCoinInfo,this.rewardCoin,"this.newPendingCoinInfo1##")}else{const o=await t.getPhaseDividendInfo(this.dividendManagerInfo);console.log(o.bonus_types[0],"==>phaseDividendInfo.bonus_types[0]");const n=o.bonus.filter(h=>Number(h.value)>0)[0].name,s=p(n,!1);console.log(s,"==>newPendingCoinAddress");let a=r.filter(h=>h.address==(s=="0x0000000000000000000000000000000000000000000000000000000000000002::sui::SUI"?"0x2::sui::SUI":s))[0];a||(a=(await i.getTokenListByCoinType([s]))[0],console.log(a,"tokenList===>")),this.newPendingCoinInfo=a,console.log(a,"===>tokenInfo"),console.log(o,"==>phaseDividendInfo"),this.pendingAmount="0",this.newPendingAmount="0",this.rewardCoinAmount="0"}}else this.pendingAmount="0",this.newPendingAmount="0",this.rewardCoinAmount="0"}catch{this.pendingAmount="--",this.newPendingAmount="--"}},async getDividendManager(){const i=await g("Sui").getDividendManager();this.nextStartTime=i.nextStartTime,this.dividendManagerInfo=i,this.getVeNFTDividendInfo()},async getAccountWhaleBalance(t){const e=await g("Sui").getOwnerCetusCoins(t);if(console.log(e,"==>assets"),e&&e.length>0){let l=new u(0);e.forEach(r=>{console.log(d(r.balance.toString(),9),"===>prettyAmount(ele.balance.toString(), 9)"),l=l.add(d(r.balance.toString(),9))}),console.log(this.whaleBalance,"===>this.whaleBalance"),this.whaleBalance=l}else this.whaleBalance="0"},async getOwnerLockCetuss(t){const e=await g("Sui").getOwnerLockCetuss(t);console.log(e,"assets===>");const l=e.sort((r,c)=>r.locked_until_time-c.locked_until_time);this.ownerLocks=l,console.log(this.ownerLocks,"===>this.ownerLocks"),this.setClaimLoading(""),this.getAvailableXCetus()},async getAvailableXCetus(){const t=g("Sui");console.log(this.ownerLocks,"==>this.ownerLocks");const i=await t.getAvailableXCetus(this.venftInfo,this.ownerLocks);console.log(i,"==>result1111"),this.availableXwhale=d(i,9),console.log(this.xWhaleBalance,"===>this.xWhaleBalance"),console.log(this.availableXwhale,"===>this.availableXwhale"),this.redeemingXwhale=this.xWhaleBalance!=="--"?new u(this.xWhaleBalance).sub(new u(this.availableXwhale)).toString():"--"},async getMyShare(t){const i=g("Sui");try{const e=await i.getMyShare(t);e?(this.xcetusShare=Number(e)>0&&Number(e)<.01?"<0.01":e,console.log(e,"result===>124")):this.xcetusShare="0"}catch(e){console.log(e,"e===>"),this.xcetusShare=""}},async getXcetusApr(){const{data:t}=await fetch(`${v.Sui.api}/v2/sui/storm/dividend_rewards`).then(e=>e.json()),i=t.apr&&t.apr.replace("%","");this.cetusApr=Number(i)>0&&Number(i)<.01?"<0.01":i,console.log(t,"data===>")},loginOut(){this.venft_id="",this.xWhaleBalance="--",this.venftInfo={},this.pendingAmount="--",this.whaleBalance="--",this.ownerLocks=[],this.availableXwhale="--",this.redeemingXwhale="--",this.xcetusShare="--",this.cetusApr="--"},setClaimLoading(t){this.claimLoading=t}}});export{x as u};
