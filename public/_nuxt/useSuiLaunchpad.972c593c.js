import{Z as B,_ as r,S as m,i as E,a as N,u as v,$ as x,a0 as M,a1 as f}from"./pool.37dfcc8a.js";import{$ as W,m as g,L as w}from"./entry.bed101c3.js";function Y(n){const d={gasConfig:new B(1.1),fullRpcUrl:localStorage.getItem(`${n}-currentRpc`)||r[n||"Sui"].fullRpcUrl,faucetURL:localStorage.getItem(`${n}-currentRpc`)||r[n||"Sui"].faucetURL,faucet_router:r[n||"Sui"].faucet_router,simulationAccount:r[n||"Sui"].simulationAccount,token:r[n||"Sui"].token,clmm:r[n||"Sui"].clmm,launchpad:r[n||"Sui"].launchpad,xwhale:r[n||"Sui"].xwhale},s=W(new m(d)),k=E(),u=g(()=>k);w(()=>{u.value.address&&(s.senderAddress=u.value.address,s.gasConfig=d.gasConfig)});const l=t=>({transactionBlock:t,options:{showEffects:!0,showEvents:!0,showInput:!0,showRawInput:!0,showObjectChanges:!0,showBalanceChanges:!0}}),L=N();g(()=>L);const P=v();g(()=>P),w(()=>{u.value.address&&(s.senderAddress=u.value.address)});const C=async t=>{t.setSenderIfNotSet(u.value.address);const e=await t.build({provider:s._fullClient});return await s.fullClient.dryRunTransactionBlock({transactionBlock:e})},S=async()=>await s.Launchpad.getPools([]),A=async t=>await s.Launchpad.getPool(t),T=async(t,e)=>{const a=await s.Launchpad.getOwnerLaunchpadCoins(e,s.Launchpad.buildLaunchpadCoinType(t.coin_type_sale,t.coin_type_raise));return M.calculateTotalBalance(a).toString()},R=async(t,e)=>{const a=e||await s.Launchpad.getPools(),o=[],i=await s.Launchpad.getPurchaseMarks(t);return a.forEach(p=>{for(const _ of i)if(_.pool_id===p.pool_address){o.push(p);break}}),o},b=async(t,e)=>{const a=e||await s.Launchpad.getPools(),o=[];return a.forEach(i=>{i.recipient===t&&o.push(i)}),o},U=async t=>{const e=new m(d);e.senderAddress=u.value.address,e.gasConfig=d.gasConfig;const a=await e.Launchpad.creatPurchasePayload({pool_address:t.pool.pool_address,purchase_amount:t.amount,coin_type_sale:t.pool.coin_type_sale,coin_type_raise:t.pool.coin_type_raise});return a.setGasBudget(2e7),l(a)},I=async t=>{const e=await s.Launchpad.creatClaimPayload({pool_address:t.pool.pool_address,coin_type_sale:t.pool.coin_type_sale,coin_type_raise:t.pool.coin_type_raise});return l(e)},h=async t=>{if(t.pool_status!=="Settle")throw new Error("The pool is not in settle ");let e=null,a=!1;const o=await s.Resources.getPoolImmutables();for(const c of o){if(c.coinTypeA===t.coin_type_sale&&c.coinTypeB===t.coin_type_raise&&Number(c.tickSpacing)===t.tick_spacing){e=await s.Resources.getPool(c.poolAddress);break}if(c.coinTypeA===t.coin_type_raise&&c.coinTypeB===t.coin_type_sale&&Number(c.tickSpacing)===t.tick_spacing){e=await s.Resources.getPool(c.poolAddress),a=!0;break}}const i=await s.Token.getTokenListByCoinTypes([t.coin_type_raise,t.coin_type_sale]),p=i[t.coin_type_sale].decimals,_=i[t.coin_type_raise].decimals;let y;if(t.liquidity_rate>0&&e===null)throw new Error("not found clmmPool ");if(e&&t.liquidity_rate>0)try{y=await s.Launchpad.creatSettlePayload({pool_address:t.pool_address,coin_type_sale:t.coin_type_sale,coin_type_raise:t.coin_type_raise,clmm_args:{current_price:t.current_price,clmm_pool_address:e.poolAddress,clmm_sqrt_price:e.current_sqrt_price.toString(),opposite:a,sale_decimals:p,raise_decimals:_}})}catch{}else y=await s.Launchpad.creatSettlePayload({pool_address:t.pool_address,coin_type_sale:t.coin_type_sale,coin_type_raise:t.coin_type_raise});return y};return{getLockNFTList:async t=>{if(t.pool_status=="Ended")return await s.Launchpad.getLockNFTList(t.pool_type,t.recipient)},beforeSettle:h,simulate:C,TickUtil:x,getCmmPoolAddress:async t=>{let e=null;const a=await s.Resources.getPoolImmutables();for(const o of a){if(o.coinTypeA===t.coin_type_sale&&o.coinTypeB===t.coin_type_raise&&Number(o.tickSpacing)==Number(t.tick_spacing)){e=await s.Resources.getPool(o.poolAddress);break}if(o.coinTypeA===t.coin_type_raise&&o.coinTypeB===t.coin_type_sale&&Number(o.tickSpacing)==Number(t.tick_spacing)){e=await s.Resources.getPool(o.poolAddress);break}}return e||null},getMyCommittedCoinAsset:T,getLaunchpadAllPools:S,getLaunchpadPoolInfo:A,getJoinPools:R,getOwnerPools:b,getCreatPurchasePayload:U,getCreatClaimPayload:I,getCreatSettlePayload:async t=>{const e=await h(t);return l(e)},getCreatWithdrawParams:async t=>{const e=s.Launchpad.creatWithdrawPayload({pool_address:t.pool.pool_address,coin_type_sale:t.pool.coin_type_sale,coin_type_raise:t.pool.coin_type_raise,sale_amount:t.sale_amount,raise_amount:t.raise_amount});return l(e)},getIsWhiteListUser:async(t,e)=>{var o;return await s.Launchpad.isWhiteListUser((o=t.white_summary)==null?void 0:o.white_handle,e)},getCreatUnlockNftPayload:async(t,e)=>{if(t.pool_status=="Ended"){if(e){const a=s.Launchpad.creatUnlockNftPayload({lock_nft:e.lock_nft_id,nft_type:e.nft_type});return l(a)}}else throw new Error("The pool is not in Ended  ")},getLockNFT:async t=>{if(t.pool_status=="Ended"){const e=await s.Launchpad.getLockNFTEvent(t.pool_type,t.tick_spacing,t.recipient);if(e){const a=await s.Launchpad.getLockNFT(e.lock_nft_id);return{lockNftEvent:e,lockNftInfo:a}}}return null},getIsAdminCap:async t=>await s.Launchpad.isAdminCap(t),getPurchaseMark:async(t,e)=>await s.Launchpad.getPurchaseMarks(t,[e]),getPurchaseAmountVal:async(t,e)=>await s.Launchpad.getPurchaseAmount(e.white_summary.white_handle,t),getUnusedRaiseAmount:async t=>await f.getHistoryWithdrawRaise(s,t),getUnusedSaleAmount:async t=>await f.getHistoryWithdrawSale(s,t),getCoinInfo:async(t,e)=>await s.Token.getTokenListByCoinTypes([t,e])}}export{Y as u};
