import{a6 as wo,l as Ao,T as go,a7 as So}from"./entry.8706ebac.js";import{c as w,a as fo}from"./sha256.e9fd4d7b.js";import{I as qo,e as X,C as so,J as z,f as ao,s as B,u as bo,b as po,a as eo,T as co,j as _o,p as uo}from"./pool.110af88e.js";import{C as ko,V as G}from"./index.54e4bd78.js";import{D as t}from"./decimal.0e8aa3f1.js";function no(n){const l={launchpad:w[n||"Sui"].launchpad,ido:w[n||"Sui"].ido,xcetus:w[n||"Sui"].xcetus,xcetus_dividends:w[n||"Sui"].xcetus_dividends,cetus_faucet:w[n||"Sui"].cetus_faucet,xtoken:w[n||"Sui"].xtoken,xtoken_dividends:w[n||"Sui"].xtoken_dividends,token_faucet:w[n||"Sui"].token_faucet,booster:w[n||"Sui"].booster,maker_bonus:w[n||"Sui"].maker_bonus,liquidity_stratefy:w[n||"Sui"].liquidity_stratefy,vaults:w[n||"Sui"].vaults},m={fullRpcUrl:localStorage.getItem(`${n}-currentRpclocal2`)||w[n||"Sui"].fullRpcUrl,simulationAccount:w[n||"Sui"].simulationAccount,cetus_config:w[n||"Sui"].cetus_config,clmm_pool:w[n||"Sui"].clmm_pool,integrate:w[n||"Sui"].integrate,deepbook:w[n||"Sui"].deepbook,deepbook_endpoint_v2:w[n||"Sui"].deepbook_endpoint_v2,aggregatorUrl:w[n||"Sui"].aggregatorUrl},c=new qo(m),e=wo(new ko(l,c)),p=fo(),j=Ao(()=>p);go(()=>{j.value.address&&(c.senderAddress=j.value.address)});const J=async()=>{console.log(e,"sdk###");const o=await e.Vaults.getVaultList();return o&&o.data||[]},C=async o=>await e.Vaults.getVault(o),i=async o=>{if(console.log(o,"###coinType"),c.senderAddress){const a=await e.ClmmSDK.fullClient.getBalance({owner:c.senderAddress,coinType:o});return a&&a.totalBalance}else return 0},u=o=>({transactionBlock:o,options:{showEffects:!0,showEvents:!0,showInput:!0,showRawInput:!0,showObjectChanges:!0,showBalanceChanges:!0}});return{getAutoPools:J,getLpBalance:i,getVault:async o=>{const a=await e.Vaults.getVault(o);return console.log(a,"vault##292"),a},deposit:async o=>{const{lowerTick:a,upperTick:k,slippage:S,rewarder_coin_types:I,isOnlyA:x,isOnlyB:L,currentTickIndex:f}=o;console.log(o,"params###");let d=o.fix_amount_a,y,U,s;if(x||L){const A=await e.Vaults.calculateDepositSwapAmount({lowerTick:a,upperTick:k,curSqrtPrice:o.curSqrtPrice,fix_amount_a:o.fix_amount_a,input_amount:o.coinAmount,coinTypeA:o.coinTypeA,coinTypeB:o.coinTypeB,clmm_pool:o.clmm_pool});console.log(A,"swapResut##211"),A?(y=new X(A.swapOutAmount),U=new X(A.afterSqrtPrice),s={swap_amount:A.swapInAmount,a2b:d},d=!d):(U=new X(o.curSqrtPrice),y=new X(o.coinAmount))}else U=o.curSqrtPrice,y=new X(o.coinAmount);let q,T,v;console.log(a,f,k,"####138"),f>=a&&f<=k?(q=so.estLiquidityAndcoinAmountFromOneAmounts(a,k,y,d,!0,S,U),T=d?y.toString():q.tokenMaxA.toString(),v=d?q.tokenMaxB.toString():y.toString()):f<a?(T=y.toNumber(),v=0):f>k&&(T=0,v=y.toNumber()),console.log({vault_id:o.id,clmm_pool:o.clmm_pool,lp_token_type:o.lp_token_type,amount_a:T,amount_b:v,fix_amount_a:d,slippage:S,coinTypeA:o.coinTypeA,coinTypeB:o.coinTypeB,rewarder_coin_types:[],swapParams:s},"params171");const N=await e.Vaults.deposit({vault_id:o.id,clmm_pool:o.clmm_pool,lp_token_type:o.lp_token_type,amount_a:T,amount_b:v,fix_amount_a:d,slippage:S,coinTypeA:o.coinTypeA,coinTypeB:o.coinTypeB,rewarder_coin_types:[],swapParams:s});return u(N)},remove:async o=>{const{lowerTick:a,upperTick:k,coinTypeA:S,coinTypeB:I,receiveAmount:x,clmm_pool:L,lowerSqrtPrice:f,upperSqrtPrice:d,fix_amount_a:y,curSqrtPrice:U,slippage:s,rewarder_coin_types:q,id:T,liquidity:v,swapParams:N,isOnlyA:A,isOnlyB:O,sliderVal:P,positionInfo:_}=o;console.log(P,"sliderVal##");const g=await C(T),W=await c.Pool.getPool(g.pool_id);let D,b,Q,K,h,M,R;if(console.log(x,"##receiveAmount"),A||O){if(D=await e.Vaults.calculateRemoveSwapAmount({lowerTick:a,upperTick:k,curSqrtPrice:W.current_sqrt_price,fix_amount_a:y,receive_amount:x,coinTypeA:S,coinTypeB:I,clmm_pool:L}),console.log(D,"swapResut###"),D){const oo=G.get_share_liquidity_by_amount(g,_.balance);b=so.getCoinAmountFromLiquidity(new X(P==100?oo:D.liquidity),new X(W.current_sqrt_price),f,d,!1),Q=G.get_protocol_fee_amount(g,b.coinA.toString()),K=G.get_protocol_fee_amount(g,b.coinB.toString()),h=P==100?_.balance:G.get_lp_amount_by_liquidity(g,D.liquidity),M=z(b.coinA.toString()).mul(z(1-o.slippage)),R=z(b.coinB.toString()).mul(z(1-o.slippage)),console.log(M.toString(),"##minAmountA"),console.log(R.toString(),"##minAmountA")}}else b=so.getCoinAmountFromLiquidity(new X(v),U,f,d,!1),Q=G.get_protocol_fee_amount(g,b.coinA.toString()),K=G.get_protocol_fee_amount(g,b.coinB.toString()),h=o.lpTokenAmount,M=z(b.coinA.toString()).mul(z(1-o.slippage)),R=z(b.coinB.toString()).mul(z(1-o.slippage)),console.log(Q,K,"##protocol_fee_amount_b");console.log(h,"lpTokenAmount remove");const Y={vault_id:o.id,clmm_pool:o.clmm_pool,lp_token_type:o.lp_token_type,coinTypeA:o.coinTypeA,coinTypeB:o.coinTypeB,lp_token_amount:h,min_amount_a:ao(M,0)||"",min_amount_b:ao(R,0)||"",rewarder_coin_types:[]};console.log(Y,"##removeParams"),(A||O)&&(Y.swapParams={a2b:!y,swap_amount:D==null?void 0:D.swapInAmount});const Z=await e.Vaults.remove(Y);return u(Z)},getAutoPool:C,calculateDepositSwapAmount:async o=>{const{lowerTick:a,upperTick:k,curSqrtPrice:S,fix_amount_a:I,input_amount:x,coinTypeA:L,coinTypeB:f,clmm_pool:d,slippage:y,decimals:U}=o;console.log(o,"params###");const s=await e.Vaults.calculateDepositSwapAmount({lowerTick:a,upperTick:k,curSqrtPrice:S,fix_amount_a:I,input_amount:x,coinTypeA:L,coinTypeB:f,clmm_pool:d});console.log(s,"##swapResut");const q=new t(s.swapOutAmount);return{...s,swapOutAmount:B(q.sub(q.mul(y)).toNumber(),U)}},calculateRemoveSwapAmount:async o=>{const{lowerTick:a,upperTick:k,curSqrtPrice:S,fix_amount_a:I,receiveAmount:x,coinTypeA:L,coinTypeB:f,clmm_pool:d,slippage:y,decimals:U}=o;console.log(o,"params###");const s=await e.Vaults.calculateRemoveSwapAmount({lowerTick:a,upperTick:k,curSqrtPrice:S,fix_amount_a:I,receive_amount:x,coinTypeA:L,coinTypeB:f,clmm_pool:d});console.log(s,"###swapResut calculateRemoveSwapAmount");const q=new t(s.swapOutAmount);return{...s,swapOutAmount:B(q.sub(q.mul(y)).toNumber(),U)}}}}const ho=So("autoPool",{state:()=>({autoPoolList:[],autoPoolObj:{},positionInfoObj:{},positionInfoList:[],positionUSDObj:{},apyObj:{},currentAutoPoolStatus:"STATUS_RUNNING"}),getters:{getPoolStore(){return bo()}},actions:{async getAutoPoolList(){const l=await no("Sui").getAutoPools();console.log(l,"list###");const m=this.getPoolStore,c=l.map(e=>({...m.poolConfigObj[e.pool_id],id:e.id,lp_token_type:e.lp_token_type,autoPoolPositionInfo:e.positins[0],is_pause:e.is_pause,total_supply:e.total_supply,liquidity:e.liquidity,protocol_fee_rate:e.protocol_fee_rate,max_liquidity_quota:e.max_liquidity_quota}));this.autoPoolList=c,this.autoPoolObj=Object.fromEntries(c.map((e,p)=>[e.address,e])),this.getMyAutoPoolPosition(),console.log(c,"##autoPoolList")},async getMyAutoPoolPosition(){var p,j,J;const n=no("Sui"),l=this.autoPoolList,m=po("Sui"),c=[],{RATES:e}=this.getPoolStore;for(let C=0;C<l.length;C++){const i=l[C];console.log(i,"poolINfo###");const u=await m.getPool(i.address),r=await n.getLpBalance(l[C].lp_token_type);console.log(r,"balance##");const V=(await m.getTokenListByCoinType([l[C].lp_token_type]))[0];console.log(V,"lpInfo##");const E=((p=e[i.coinA.address])==null?void 0:p.price)||"",F=((j=e[i.coinB.address])==null?void 0:j.price)||"",$=i.autoPoolPositionInfo.tick_lower_index,o=i.autoPoolPositionInfo.tick_upper_index,a={tick_lower_index:$,tick_upper_index:o,current_sqrt_price:u==null?void 0:u.current_sqrt_price,liquidity:Number(r)>0?G.get_share_liquidity_by_amount({liquidity:i==null?void 0:i.liquidity,total_supply:i==null?void 0:i.total_supply},r):0},k=await m.getCoinAmountFromLiquidity({pool:{...i,current_sqrt_price:u==null?void 0:u.current_sqrt_price},position:a,roundUp:!1});console.log(k,"##amountInfo");const S=k.coinaAmount,I=k.coinbAmount,x=S,L=I,f=i.coinA.decimals,d=i.coinB.decimals,y=m.TickMath.tickIndexToPrice(Number($),f,d).toString(),U=m.TickMath.tickIndexToPrice(Number(o),f,d).toString(),s=new t(E).mul(new t(S)).toNumber(),q=new t(F).mul(new t(I)).toNumber(),T=s>0&&s<.01?"<$0.01":`$${eo(B(s,2))}`,v=q>0&&q<.01?"<$0.01":`$${eo(B(q,2))}`,N=co.sqrtPriceX64ToPrice(u.current_sqrt_price,f,d);let A,O;const P=await m.getCoinAmountFromLiquidity({pool:{...i,tick_lower_index:$,tick_upper_index:o,current_sqrt_price:u==null?void 0:u.current_sqrt_price},position:{...a,liquidity:i.liquidity},roundUp:!1}),_=new t(P.coinaAmount).toNumber(),g=new t(P.coinbAmount).toNumber();console.log(_,g,N.toString(),"###116");const W=B(new t(_).mul(new t(E)).toNumber(),2),D=B(new t(g).mul(new t(F)).toNumber(),2);if(console.log(u,"newPool##"),console.log(_,g,"###131"),_>0&&g>0){const to=new t(_).mul(N).add(new t(g));A=new t(_).mul(N).div(to).mul(100).toNumber().toFixed(2),O=new t(g).div(to).mul(100).toNumber().toFixed(2)}else _>0?(A=100,O=0):g>0?(A=0,O=100):(A=50,O=50);console.log(_,g,A,O,"###147");let b=0;Number(r)>0&&(b=new t(r).div(Math.pow(10,V.decimals)));const Q=E&&F?B(new t(s).add(new t(q)).toString(),2):"",K=i.total_supply;let h=0;b>0&&K>0&&(h=new t(b).mul(Math.pow(10,V.decimals)).div(new t(K)).mul(100).toNumber()),console.log(h,"##myShare");const M=new t(1).div(Math.pow(10,i.decimals)).toNumber();let R=0;if(h>1)R=B(h,2);else if(h>0&&h<M)R=`<${M}`;else if(h==0)R=0;else{const to=_o(h),yo=to==-1?2:to+2;R=B(h,yo)}console.log(r,b.toString(),"###balance");const Y={tick_lower_index:$,tick_upper_index:o,current_sqrt_price:u==null?void 0:u.current_sqrt_price,liquidity:i.max_liquidity_quota},Z=await m.getCoinAmountFromLiquidity({pool:{...i,current_sqrt_price:u==null?void 0:u.current_sqrt_price},position:Y,roundUp:!1}),oo=new t(E).mul(new t(Z.coinaAmount)),H=new t(F).mul(new t(Z.coinbAmount)),io=new t(E).mul(new t(P.coinaAmount)),mo=new t(F).mul(new t(P.coinbAmount)),lo=oo.add(H).toNumber(),ro=io.add(mo).toNumber();this.positionInfoObj[i.id]={tick_lower_index:$,tick_upper_index:o,current_sqrt_price:u.current_sqrt_price,myLiquidity:uo(r,V.decimals),amountA:x,amountB:L,...i,lpInfo:V,myAmountAUSD:T,myAmountBUSD:v,myLiquidityUSD:Q,myShare:R,minPrice:y,maxPrice:U,poolCoinARatio:A,poolCoinBRatio:O,poolCoinANum:_,poolCoinBNum:g,poolCoinAUSD:W,poolCoinBUSD:D,quoteUSD:lo,poolUSD:ro,balance:r},c.push({tick_lower_index:$,tick_upper_index:o,current_sqrt_price:(J=i==null?void 0:i.object)==null?void 0:J.current_sqrt_price,myLiquidity:uo(r,V.decimals),amountA:x,amountB:L,...i,lpInfo:V,myAmountAUSD:T,myAmountBUSD:v,myLiquidityUSD:Q,myShare:R,minPrice:y,maxPrice:U,poolCoinARatio:A,poolCoinBRatio:O,poolCoinANum:_,poolCoinBNum:g,poolCoinAUSD:W,poolCoinBUSD:D,quoteUSD:lo,poolUSD:ro,balance:r})}this.positionInfoList=c,console.log(this.positionInfoObj,"this.positionInfoObj###"),console.log(this.positionInfoList,"###this.positionInfoList")},async updatePositionItem(n){var Z,oo;const l=no("Sui"),m=po("Sui"),c=await l.getAutoPool(n),e=await m.getPool(c.pool_id);console.log("newPoolInfo:",c),console.log("newPool:",e),console.log("this.positionInfoObj[id]:",this.positionInfoObj[n]);const p={...this.positionInfoObj[n],autoPoolPositionInfo:c.positins[0]},j=await l.getLpBalance(p.lp_token_type),J=(await m.getTokenListByCoinType([p.lp_token_type]))[0];console.log(j,"###balance updatePositionItem");const C=p.autoPoolPositionInfo.tick_lower_index,i=p.autoPoolPositionInfo.tick_upper_index,u={tick_lower_index:C,tick_upper_index:i,current_sqrt_price:e.current_sqrt_price,liquidity:G.get_share_liquidity_by_amount({liquidity:c==null?void 0:c.liquidity,total_supply:c==null?void 0:c.total_supply},j)},r=m.getCoinAmountFromLiquidity({pool:{current_sqrt_price:e.current_sqrt_price,...p},position:u,roundUp:!1});console.log(r,"amountInfo###"),r.coinaAmount,r.coinbAmount;const V=r.coinaAmount,E=r.coinbAmount,{RATES:F}=this.getPoolStore,$=c.total_supply,o=co.sqrtPriceX64ToPrice(e.current_sqrt_price,p.coinA.decimals,p.coinB.decimals),a=2,k=2,S=((Z=F[p.coinA.address])==null?void 0:Z.price)||0,I=((oo=F[p.coinB.address])==null?void 0:oo.price)||0,x=new t(S).mul(new t(r==null?void 0:r.coinaAmount)).toNumber(),L=new t(I).mul(new t(r==null?void 0:r.coinbAmount)).toNumber(),f=x>0&&x<.01?"<$0.01":`$${eo(B(x,2))}`,d=L>0&&L<.01?"<$0.01":`$${eo(B(L,2))}`;let y=new t(0);Number(j)>0&&(y=new t(j).div(Math.pow(10,J.decimals)));const U=S&&I?B(new t(x).add(new t(L)).toString(),2):"",s=new t(y).mul(Math.pow(10,p.lpInfo.decimals)).div(new t($)).mul(100).toNumber();console.log(s,"##myShare");const q=new t(1).div(Math.pow(10,p.decimals)).toNumber();let T=0;if(s>1)T=B(s,2);else if(s>0&&s<q)T=`<${q}`;else if(s==0)T=0;else{const H=_o(s),io=H==-1?2:H+2;T=B(s,io)}let v,N;const A=co.sqrtPriceX64ToPrice(e.current_sqrt_price,a,k),O=await m.getCoinAmountFromLiquidity({pool:{...p,tick_lower_index:C,tick_upper_index:i,current_sqrt_price:e==null?void 0:e.current_sqrt_price},position:{...u,liquidity:c.liquidity},roundUp:!1}),P=new t(O.coinaAmount).toNumber(),_=new t(O.coinbAmount).toNumber();console.log(P,_,A.toString(),"###116");const g=B(new t(P).mul(new t(S)).toNumber(),2),W=B(new t(_).mul(new t(I)).toNumber(),2);if(console.log(e,"newPool##"),console.log(P,_,"###poolCoinBNum"),P>0&&_>0){const H=new t(P).mul(A).add(new t(_));v=new t(P).mul(A).div(H).mul(100).toNumber().toFixed(2),N=new t(_).div(H).mul(100).toNumber().toFixed(2)}else P>0?(v=100,N=0):_>0?(v=0,N=100):(v=50,N=50);const D={tick_lower_index:C,tick_upper_index:i,current_sqrt_price:e==null?void 0:e.current_sqrt_price,liquidity:p.max_liquidity_quota},b=await m.getCoinAmountFromLiquidity({pool:{...p,current_sqrt_price:e==null?void 0:e.current_sqrt_price},position:D,roundUp:!1}),Q=new t(S).mul(new t(b.coinaAmount)),K=new t(I).mul(new t(b.coinbAmount)),h=new t(S).mul(new t(O.coinaAmount)),M=new t(I).mul(new t(O.coinbAmount)),R=Q.add(K).toNumber(),Y=h.add(M).toNumber();this.positionInfoObj[n]={...p,tick_lower_index:C,tick_upper_index:i,current_sqrt_price:e.current_sqrt_price,myLiquidity:uo(j,J.decimals),amountA:V,amountB:E,myShare:T,myAmountAUSD:f,myAmountBUSD:d,myLiquidityUSD:U,poolCoinARatio:v,poolCoinBRatio:N,poolCoinANum:P,poolCoinBNum:_,poolCoinAUSD:g,poolCoinBUSD:W,quoteUSD:R,poolUSD:Y,balance:j,price:o},console.log(this.positionInfoObj[n],"###this.positionInfoObj[id]")},async getAutoPoolAPY(){try{const{data:n}=await fetch(`${w.Sui.api}/v2/sui/auto_pools`).then(l=>l.json());n&&n.pools&&n.pools.length>0&&(this.apyObj=Object.fromEntries(n.pools.map((l,m)=>[l.object_id,{...l,apr:l.apr.replace("%","")>0&&l.apr.replace("%","")<.01?"<0.01%":B(l.apr.replace("%",""),2)+"%",resultApr:l.apr.replace("%","")}])),console.log(this.apyObj,"data##"))}catch{this.apyObj={}}},async getVault(n){const l=no("Sui"),{status:m}=await l.getVault(n);this.currentAutoPoolStatus=m,this.updatePositionItem(n),console.log(m,"status##")}}});export{no as a,ho as u};
